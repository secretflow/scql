{
  "queries": [
    {
      "name": "geodist test, param order(longtitude1, latitude1, longtitude2, latitude2, radius)",
      "query": "select geodist(ta.plain_float_0, ta.plain_float_0, tb.plain_float_0, tb.plain_float_0, 6300) / 100 as distance from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.join_int_0 = tb.join_int_0;",
      "mysql_query": "select 6300 * acos(sin(radians(ta.plain_float_0)) * sin(radians(tb.plain_float_0)) + cos(radians(ta.plain_float_0)) * cos(radians(tb.plain_float_0)) * cos(radians(ta.plain_float_0) - radians(tb.plain_float_0))) / 100 as distance from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.join_int_0 = tb.join_int_0;"
    },
    {
      "name": "geodist test, param order(longtitude1, latitude1, longtitude2, latitude2)",
      "query": "select geodist(ta.plain_float_0, ta.plain_float_0, tb.plain_float_0, tb.plain_float_0) / 100 as distance from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.join_int_0 = tb.join_int_0;",
      "mysql_query": "select 6371 * acos(sin(radians(ta.plain_float_0)) * sin(radians(tb.plain_float_0)) + cos(radians(ta.plain_float_0)) * cos(radians(tb.plain_float_0)) * cos(radians(ta.plain_float_0) - radians(tb.plain_float_0))) / 100 as distance from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.join_int_0 = tb.join_int_0;"
    },
    {
      "name": "geodist test(secret), param order(longtitude1, latitude1, longtitude2, latitude2)",
      "query": "select u.plain_int_0, u.plain_float_0, geodist(u.plain_int_0, u.plain_int_0, u.plain_float_0, u.plain_float_0) / 1000 as distance from (select ta.plain_int_0, ta.plain_float_0 from alice_tbl_0 as ta union all select tb.plain_int_0, tb.plain_float_0 from bob_tbl_0 as tb) as u;",
      "mysql_query": "select u.plain_int_0, u.plain_float_0, 6371 * acos(sin(radians(u.plain_int_0)) * sin(radians(u.plain_float_0)) + cos(radians(u.plain_int_0)) * cos(radians(u.plain_float_0)) * cos(radians(u.plain_int_0) - radians(u.plain_float_0))) / 1000 as distance from (select ta.plain_int_0, ta.plain_float_0 from alice.tbl_0 as ta union all select tb.plain_int_0, tb.plain_float_0 from bob.tbl_0 as tb) as u;"
    },
    {
      "name": "all trigono union(make secret)",
      "query": "select u.plain_int_0, sin(u.plain_int_0) / 10 as sin_plain_int_0, cos(u.plain_int_0) as cos_plain_int_0, acos(u.plain_int_0 / 10000) as acos_plain_int_0 from (select ta.plain_int_0 from alice_tbl_0 as ta union all select tb.plain_int_0 from bob_tbl_0 as tb) as u",
      "mysql_query": "select u.plain_int_0, sin(u.plain_int_0) / 10 as sin_plain_int_0, cos(u.plain_int_0) as cos_plain_int_0, acos(u.plain_int_0 / 10000) as acos_plain_int_0 from (select ta.plain_int_0 from  alice.tbl_0 as ta union all select tb.plain_int_0 from bob.tbl_0 as tb) as u;"
    },
    {
      "name": "sine union(make secret)",
      "query": "select u.plain_int_0, sin(u.plain_int_0) as sin_plain_int_0 from (select ta.plain_int_0 from alice_tbl_0 as ta union all select tb.plain_int_0 from bob_tbl_0 as tb) as u",
      "mysql_query": "select u.plain_int_0, sin(u.plain_int_0) as sin_plain_int_0 from (select ta.plain_int_0 from  alice.tbl_0 as ta union all select tb.plain_int_0 from bob.tbl_0 as tb) as u;"
    },
    {
      "name": "cosine union(make secret)",
      "query": "select u.plain_int_0, cos(u.plain_int_0) as cos_plain_int_0 from (select ta.plain_int_0 from alice_tbl_0 as ta union all select tb.plain_int_0 from bob_tbl_0 as tb) as u",
      "mysql_query": "select u.plain_int_0, cos(u.plain_int_0) as cos_plain_int_0 from (select ta.plain_int_0 from  alice.tbl_0 as ta union all select tb.plain_int_0 from bob.tbl_0 as tb) as u;"
    },
    {
      "name": "arc cosine union(make secret)",
      "query": "select u.plain_int_0, acos(u.plain_int_0 / 10000) as acos_plain_int_0 from (select ta.plain_int_0 from alice_tbl_0 as ta union all select tb.plain_int_0 from bob_tbl_0 as tb) as u",
      "mysql_query": "select u.plain_int_0, acos(u.plain_int_0 / 10000) as acos_plain_int_0 from (select ta.plain_int_0 from  alice.tbl_0 as ta union all select tb.plain_int_0 from bob.tbl_0 as tb) as u;"
    },
    {
      "name": "naive trigonometric",
      "query": "select sin(ta.plain_float_0) as sin_plain_float_0, cos(ta.plain_float_0) as cos_plain_float_0, acos(ta.plain_float_0 / 10000) as acos_plain_float_0 from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.join_int_0 = tb.join_int_0;",
      "mysql_query": "select sin(ta.plain_float_0) as sin_plain_float_0, cos(ta.plain_float_0) as cos_plain_float_0, acos(ta.plain_float_0 / 10000) as acos_plain_float_0 from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.join_int_0 = tb.join_int_0;"
    },
    {
      "name": "naive trigonometric sin/cos/acos",
      "query": "select sin(ta.plain_float_0 * 1.5) as sin_plain_float_0, cos(ta.plain_float_0) as cos_plain_float_0, acos(ta.plain_float_0 / 10000) as acos_plain_float_0 from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.join_int_0 = tb.join_int_0;",
      "mysql_query": "select sin(ta.plain_float_0 * 1.5) as sin_plain_float_0, cos(ta.plain_float_0) as cos_plain_float_0, acos(ta.plain_float_0 / 10000) as acos_plain_float_0 from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.join_int_0 = tb.join_int_0;"
    },
    {
      "name": "trigonometric add with constant integer value",
      "query": "select ta.plain_float_0 + sin(1) as sin_plain_float_0, ta.plain_float_0 + cos(1) as cos_plain_float_0, ta.plain_float_0 + acos(1) as acos_plain_float_0 from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.join_int_0 = tb.join_int_0;",
      "mysql_query": "select ta.plain_float_0 + sin(1) as sin_plain_float_0, ta.plain_float_0 + cos(1) as cos_plain_float_0, ta.plain_float_0 + acos(1) as acos_plain_float_0 from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.join_int_0 = tb.join_int_0;"
    },
    {
      "name": "trigonometric add with constant float value",
      "query": "select ta.plain_float_0 + sin(3.14) as sin_plain_float_0, ta.plain_float_0 + cos(3.14) as cos_plain_float_0, ta.plain_float_0 + acos(0.5) as acos_plain_float_0 from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.join_int_0 = tb.join_int_0;",
      "mysql_query": "select ta.plain_float_0 + sin(3.14) as sin_plain_float_0, ta.plain_float_0 + cos(3.14) as cos_plain_float_0, ta.plain_float_0 + acos(0.5) as acos_plain_float_0 from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.join_int_0 = tb.join_int_0;"
    },
    {
      "name": "count & distinct & if after join",
      "query": "select if(alice.encrypt_int_0>1, -alice.plain_int_0, -1) as cd from alice_tbl_0 as alice inner join bob_tbl_0 as bob on alice.join_string_0=bob.join_string_0;",
      "mysql_query": "select if(alice.encrypt_int_0>1, -alice.plain_int_0, -1) as cd from alice.tbl_0 as alice inner join bob.tbl_0 as bob on alice.join_string_0=bob.join_string_0;"
    },
    {
      "name": "join on",
      "query": "select alice.plain_int_0, bob.joinpayload_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select alice.plain_int_0, bob.joinpayload_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "left join on",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice left join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice left join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "right join on",
      "query": "select count(alice.plain_int_0) as t1 from alice_tbl_0 as alice right join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select count(alice.plain_int_0) as t1 from alice.tbl_0 as alice right join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "join where",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice, bob_tbl_0 as bob where alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice, bob.tbl_0 as bob where alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "join on multi keys",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 and alice.join_string_0 = bob.join_string_0 and alice.plain_datetime_0 = bob.plain_datetime_0 and alice.plain_timestamp_0 = bob.plain_timestamp_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 and alice.join_string_0 = bob.join_string_0 and alice.plain_datetime_0 = bob.plain_datetime_0 and alice.plain_timestamp_0 = bob.plain_timestamp_0;"
    },
    {
      "name": "left join on multi keys",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice left join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 and alice.join_string_0 = bob.join_string_0 and alice.plain_datetime_0 = bob.plain_datetime_0 and alice.plain_timestamp_0 = bob.plain_timestamp_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice left join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 and alice.join_string_0 = bob.join_string_0 and alice.plain_datetime_0 = bob.plain_datetime_0 and alice.plain_timestamp_0 = bob.plain_timestamp_0;"
    },
    {
      "name": "right join on multi keys",
      "query": "select count(alice.plain_int_0) as t1 from alice_tbl_0 as alice right join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 and alice.join_string_0 = bob.join_string_0 and alice.plain_datetime_0 = bob.plain_datetime_0 and alice.plain_timestamp_0 = bob.plain_timestamp_0;",
      "mysql_query": "select count(alice.plain_int_0) as t1 from alice.tbl_0 as alice right join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 and alice.join_string_0 = bob.join_string_0 and alice.plain_datetime_0 = bob.plain_datetime_0 and alice.plain_timestamp_0 = bob.plain_timestamp_0;"
    },
    {
      "name": "join three table(alice, alice, bob)",
      "query": "select alice0.plain_int_0 from alice_tbl_0 as alice0 join alice_tbl_1 as alice1 on alice0.encrypt_int_0 = alice1.encrypt_int_0 join bob_tbl_0 as bob0 on alice1.join_int_0 = bob0.join_int_0;",
      "mysql_query": "select alice0.plain_int_0 from alice.tbl_0 as alice0 join alice.tbl_1 as alice1 on alice0.encrypt_int_0 = alice1.encrypt_int_0 join bob.tbl_0 as bob0 on alice1.join_int_0 = bob0.join_int_0;"
    },
    {
      "name": "join three table(alice, bob, alice)",
      "query": "select alice0.plain_int_0 from alice_tbl_0 as alice0 join bob_tbl_0 as bob0 on alice0.join_int_0 = bob0.join_int_0 join alice_tbl_1 as alice1 on bob0.join_int_1 = alice1.join_int_1;",
      "mysql_query": "select alice0.plain_int_0 from alice.tbl_0 as alice0 join bob.tbl_0 as bob0 on alice0.join_int_0 = bob0.join_int_0 join alice.tbl_1 as alice1 on bob0.join_int_1 = alice1.join_int_1;"
    },
    {
      "name": "join three table(alice, bob, bob)",
      "query": "select alice0.plain_int_0 from alice_tbl_0 as alice0 join bob_tbl_0 as bob0 on alice0.join_int_0 = bob0.join_int_0 join bob_tbl_1 as bob1 on alice0.join_int_1 = bob1.join_int_1;",
      "mysql_query": "select alice0.plain_int_0 from alice.tbl_0 as alice0 join bob.tbl_0 as bob0 on alice0.join_int_0 = bob0.join_int_0 join bob.tbl_1 as bob1 on alice0.join_int_1 = bob1.join_int_1;"
    },
    {
      "name": "apply in after join",
      "query": "select alice.compare_int_0 in (select compare_int_0 from bob_tbl_0) as bob from alice_tbl_0 as alice;",
      "mysql_query": "select alice.compare_int_0 in (select compare_int_0 from bob.tbl_0) as bob from alice.tbl_0 as alice;"
    },
    {
      "name": "compare (less) after join",
      "query": "select alice.compare_int_0 < bob.compare_int_0 as res0, alice.compare_int_0 < bob.compare_float_0 as res1, alice.compare_float_0 < bob.compare_float_0 as res2, alice.compare_datetime_0 < bob.compare_datetime_0 as res3, alice.compare_timestamp_0 < bob.compare_timestamp_0 as res4 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select alice.compare_int_0 < bob.compare_int_0 as res0, alice.compare_int_0 < bob.compare_float_0 as res1, alice.compare_float_0 < bob.compare_float_0 as res2, alice.compare_datetime_0 < bob.compare_datetime_0 as res3, alice.compare_timestamp_0 < bob.compare_timestamp_0 as res4 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "compare (greater) after join",
      "query": "select alice.compare_int_0 > bob.compare_int_0 as res0, alice.compare_int_0 > bob.compare_float_0 as res1, alice.compare_float_0 > bob.compare_float_0 as res2, alice.compare_datetime_0 > bob.compare_datetime_0 as res3, alice.compare_timestamp_0 > bob.compare_timestamp_0 as res4 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select alice.compare_int_0 > bob.compare_int_0 as res0, alice.compare_int_0 > bob.compare_float_0 as res1, alice.compare_float_0 > bob.compare_float_0 as res2, alice.compare_datetime_0 > bob.compare_datetime_0 as res3, alice.compare_timestamp_0 > bob.compare_timestamp_0 as res4 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "compare (less or equal) after join",
      "query": "select alice.compare_int_0 <= bob.compare_int_0 as res0, alice.compare_int_0 <= bob.compare_float_0 as res1, alice.compare_float_0 <= bob.compare_float_0 as res2, alice.compare_datetime_0 <= bob.compare_datetime_0 as res3, alice.compare_timestamp_0 <= bob.compare_timestamp_0 as res4 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select alice.compare_int_0 <= bob.compare_int_0 as res0, alice.compare_int_0 <= bob.compare_float_0 as res1, alice.compare_float_0 <= bob.compare_float_0 as res2, alice.compare_datetime_0 <= bob.compare_datetime_0 as res3, alice.compare_timestamp_0 <= bob.compare_timestamp_0 as res4 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "compare (greater or equal) after join",
      "query": "select alice.compare_int_0 >= bob.compare_int_0 as res0, alice.compare_int_0 >= bob.compare_float_0 as res1, alice.compare_float_0 >= bob.compare_float_0 as res2, alice.compare_datetime_0 >= bob.compare_datetime_0 as res3, alice.compare_timestamp_0 >= bob.compare_timestamp_0 as res4 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select alice.compare_int_0 >= bob.compare_int_0 as res0, alice.compare_int_0 >= bob.compare_float_0 as res1, alice.compare_float_0 >= bob.compare_float_0 as res2, alice.compare_datetime_0 >= bob.compare_datetime_0 as res3, alice.compare_timestamp_0 >= bob.compare_timestamp_0 as res4 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "compare (not equal) after join",
      "query": "select alice.compare_int_0 <> bob.compare_int_0 as res0, alice.compare_int_0 <> bob.compare_float_0 as res1, alice.compare_float_0 <> bob.compare_float_0 as res2, alice.compare_datetime_0 <> bob.compare_datetime_0 as res3, alice.compare_timestamp_0 <> bob.compare_timestamp_0 as res4 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select alice.compare_int_0 <> bob.compare_int_0 as res0, alice.compare_int_0 <> bob.compare_float_0 as res1, alice.compare_float_0 <> bob.compare_float_0 as res2, alice.compare_datetime_0 <> bob.compare_datetime_0 as res3, alice.compare_timestamp_0 <> bob.compare_timestamp_0 as res4 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "arithmetic (plus) after join",
      "query": "select bob.plain_int_0 + alice.plain_int_0 as res0, alice.plain_int_0 + bob.plain_float_0 as res1, alice.plain_float_0 + bob.plain_float_0 as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select bob.plain_int_0 + alice.plain_int_0 as res0, alice.plain_int_0 + bob.plain_float_0 as res1, alice.plain_float_0 + bob.plain_float_0 as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "arithmetic (subtract) after join",
      "query": "select bob.plain_int_0 - alice.plain_int_0 as res0, alice.plain_int_0 - bob.plain_float_0 as res1, alice.plain_float_0 - bob.plain_float_0 as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select bob.plain_int_0 - alice.plain_int_0 as res0, alice.plain_int_0 - bob.plain_float_0 as res1, alice.plain_float_0 - bob.plain_float_0 as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "arithmetic (multiply) after join",
      "query": "select bob.plain_int_0 * alice.plain_int_0 as res0, alice.plain_int_0 * bob.plain_float_0 as res1, alice.plain_float_0 * bob.plain_float_0 as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select bob.plain_int_0 * alice.plain_int_0 as res0, alice.plain_int_0 * bob.plain_float_0 as res1, alice.plain_float_0 * bob.plain_float_0 as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "arithmetic (divide) after join",
      "query": "select bob.plain_int_0 / (alice.plain_int_0 * alice.plain_int_0 + 1) as res0, alice.plain_int_0 / (bob.plain_float_0 *  bob.plain_float_0 + 1) as res1, alice.plain_float_0 / (bob.plain_float_0 * bob.plain_float_0 + 1) as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select bob.plain_int_0 / (alice.plain_int_0 * alice.plain_int_0 + 1) as res0, alice.plain_int_0 / (bob.plain_float_0 *  bob.plain_float_0 + 1) res1, alice.plain_float_0 / (bob.plain_float_0 * bob.plain_float_0 + 1) as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "arithmetic (mod) after join",
      "query": "select bob.plain_int_0 % (alice.plain_int_0 * alice.plain_int_0 + 1) as res0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select bob.plain_int_0 % (alice.plain_int_0 * alice.plain_int_0 + 1) as res0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "max after join",
      "query": "select max(alice.aggregate_int_0) as res0, max(bob.aggregate_int_0) as res1, max(alice.aggregate_float_0) as res2, max(bob.aggregate_float_0) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select max(alice.aggregate_int_0) as res0, max(bob.aggregate_int_0) as res1, max(alice.aggregate_float_0) as res2, max(bob.aggregate_float_0) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "max & arithmetic after join",
      "query": "select max(alice.aggregate_int_0 + bob.aggregate_int_0) as res0, max(alice.aggregate_float_0 - bob.aggregate_float_1) as res1, max(alice.aggregate_float_0 * bob.aggregate_float_0) as res2, max(alice.aggregate_float_0 / (bob.aggregate_float_0 * bob.aggregate_float_0 + 1)) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select max(alice.aggregate_int_0 + bob.aggregate_int_0) as res0, max(alice.aggregate_float_0 - bob.aggregate_float_1) as res1, max(alice.aggregate_float_0 * bob.aggregate_float_0) as res2, max(alice.aggregate_float_0 /(bob.aggregate_float_0 * bob.aggregate_float_0 + 1)) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "max & compare after join",
      "query": "select max(alice.aggregate_int_0) > max(bob.aggregate_int_0) as res0, max(alice.aggregate_float_0) < max(bob.aggregate_float_1) as res1, max(alice.aggregate_int_0) >= max(bob.aggregate_float_0) as res2, max(alice.aggregate_float_0) <= max(bob.aggregate_float_0) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select max(alice.aggregate_int_0) > max(bob.aggregate_int_0) as res0, max(alice.aggregate_float_0) < max(bob.aggregate_float_1) as res1, max(alice.aggregate_int_0) >= max(bob.aggregate_float_0) as res2, max(alice.aggregate_float_0) <= max(bob.aggregate_float_0) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "min after join",
      "query": "select min(alice.aggregate_int_0) as res0, min(bob.aggregate_int_0) as res1, min(alice.aggregate_float_0) as res2, min(bob.aggregate_float_0) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select min(alice.aggregate_int_0) as res0, min(bob.aggregate_int_0) as res1, min(alice.aggregate_float_0) as res2, min(bob.aggregate_float_0) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "min & arithmetic after join",
      "query": "select min(alice.aggregate_int_0 + bob.aggregate_int_0) as res0, min(alice.aggregate_float_0 - bob.aggregate_float_1) as res1, min(alice.aggregate_float_0 * bob.aggregate_float_0) as res2, min(alice.aggregate_float_0 / (bob.aggregate_float_0 * bob.aggregate_float_0 + 1)) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select min(alice.aggregate_int_0 + bob.aggregate_int_0) as res0, min(alice.aggregate_float_0 - bob.aggregate_float_1) as res1, min(alice.aggregate_float_0 * bob.aggregate_float_0) as res2, min(alice.aggregate_float_0 / (bob.aggregate_float_0 * bob.aggregate_float_0 + 1)) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "min & compare after join",
      "query": "select min(alice.aggregate_int_0) > min(bob.aggregate_int_0) as res0, min(alice.aggregate_float_0) < min(bob.aggregate_float_1) as res1, min(alice.aggregate_int_0) >= min(bob.aggregate_float_0) as res2, min(alice.aggregate_float_0) <= min(bob.aggregate_float_0) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select min(alice.aggregate_int_0) > min(bob.aggregate_int_0) as res0, min(alice.aggregate_float_0) < min(bob.aggregate_float_1) as res1, min(alice.aggregate_int_0) >= min(bob.aggregate_float_0) as res2, min(alice.aggregate_float_0) <= min(bob.aggregate_float_0) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "avg after join",
      "query": "select avg(alice.aggregate_int_0) as res0, avg(bob.aggregate_int_0) as res1, avg(alice.aggregate_float_0) as res2, avg(bob.aggregate_float_0) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select avg(alice.aggregate_int_0) as res0, avg(bob.aggregate_int_0) as res1, avg(alice.aggregate_float_0) as res2, avg(bob.aggregate_float_0) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "avg & arithmetic after join",
      "query": "select avg(alice.aggregate_int_0 + bob.aggregate_int_0) as res0, avg(alice.aggregate_float_0 - bob.aggregate_float_1) as res1, avg(alice.aggregate_float_0 * bob.aggregate_float_0) as res2, avg(alice.aggregate_float_0 / (bob.aggregate_float_0 * bob.aggregate_float_0 + 1)) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select avg(alice.aggregate_int_0 + bob.aggregate_int_0) as res0, avg(alice.aggregate_float_0 - bob.aggregate_float_1) as res1, avg(alice.aggregate_float_0 * bob.aggregate_float_0) as res2, avg(alice.aggregate_float_0 / (bob.aggregate_float_0 * bob.aggregate_float_0 + 1)) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "avg & compare after join",
      "query": "select avg(alice.aggregate_int_0) > avg(bob.aggregate_int_0) as res0, avg(alice.aggregate_float_0) < avg(bob.aggregate_float_1) as res1, avg(alice.aggregate_int_0) >= avg(bob.aggregate_float_0) as res2, avg(alice.aggregate_float_0) <= avg(bob.aggregate_float_0) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select avg(alice.aggregate_int_0) > avg(bob.aggregate_int_0) as res0, avg(alice.aggregate_float_0) < avg(bob.aggregate_float_1) as res1, avg(alice.aggregate_int_0) >= avg(bob.aggregate_float_0) as res2, avg(alice.aggregate_float_0) <= avg(bob.aggregate_float_0) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "sum after join",
      "query": "select sum(alice.aggregate_int_0) as res0, sum(bob.aggregate_int_0) as res1, sum(alice.aggregate_float_0) as res2, sum(bob.aggregate_float_0) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select sum(alice.aggregate_int_0) as res0, sum(bob.aggregate_int_0) as res1, sum(alice.aggregate_float_0) as res2, sum(bob.aggregate_float_0) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "sum bool after join",
      "query": "select sum(alice.aggregate_int_0 > 0) as res0, sum(bob.aggregate_int_0 > 0) as res1, sum(alice.aggregate_float_0 > 0) as res2, sum(bob.aggregate_float_0 > 0) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select sum(alice.aggregate_int_0 > 0) as res0, sum(bob.aggregate_int_0 > 0) as res1, sum(alice.aggregate_float_0 > 0) as res2, sum(bob.aggregate_float_0 > 0) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "sum & arithmetic after join",
      "query": "select sum(alice.aggregate_int_0 + bob.aggregate_int_0) as res0, sum(alice.aggregate_float_0 - bob.aggregate_float_1) as res1, sum(alice.aggregate_float_0 * bob.aggregate_float_0) as res2, sum(alice.aggregate_float_0 /(bob.aggregate_float_0 * bob.aggregate_float_0 + 1)) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select sum(alice.aggregate_int_0 + bob.aggregate_int_0) as res0, sum(alice.aggregate_float_0 - bob.aggregate_float_1) as res1, sum(alice.aggregate_float_0 * bob.aggregate_float_0) as res2, sum(alice.aggregate_float_0 /(bob.aggregate_float_0 * bob.aggregate_float_0 + 1)) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "sum & compare after join",
      "query": "select sum(alice.aggregate_int_0) > sum(bob.aggregate_int_0) as res0, sum(alice.aggregate_float_0) < sum(bob.aggregate_float_1) as res1, sum(alice.aggregate_int_0) >= sum(bob.aggregate_float_0) as res2, sum(alice.aggregate_float_0) <= sum(bob.aggregate_float_0) as res3 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select sum(alice.aggregate_int_0) > sum(bob.aggregate_int_0) as res0, sum(alice.aggregate_float_0) < sum(bob.aggregate_float_1) as res1, sum(alice.aggregate_int_0) >= sum(bob.aggregate_float_0) as res2, sum(alice.aggregate_float_0) <= sum(bob.aggregate_float_0) as res3 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "count after join",
      "query": "select count(alice.aggregate_int_0) as res0, count(bob.aggregate_int_0) as res1, count(alice.aggregate_float_0) as res2, count(bob.aggregate_float_0) as res3, count(alice.aggregate_string_0) as res4, count(bob.aggregate_string_0) as res5, count(alice.aggregate_datetime_0) as res6, count(bob.aggregate_datetime_0) as res7, count(alice.aggregate_timestamp_0) as res8, count(bob.aggregate_timestamp_0) as res9 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select count(alice.aggregate_int_0) as res0, count(bob.aggregate_int_0) as res1, count(alice.aggregate_float_0) as res2, count(bob.aggregate_float_0) as res3, count(alice.aggregate_string_0) as res4, count(bob.aggregate_string_0) as res5, count(alice.aggregate_datetime_0) as res6, count(bob.aggregate_datetime_0) as res7, count(alice.aggregate_timestamp_0) as res8, count(bob.aggregate_timestamp_0) as res9 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "count & distinct after join",
      "query": "select count(distinct alice.aggregate_int_0) as res0, count(distinct bob.aggregate_int_0) as res1, count(distinct alice.aggregate_float_0) as res2, count(distinct bob.aggregate_float_0) as res3, count(distinct alice.aggregate_string_0) as res4, count(distinct bob.aggregate_string_0) as res5, count(distinct alice.aggregate_datetime_0) as res6, count(distinct bob.aggregate_datetime_0) as res7, count(distinct alice.aggregate_timestamp_0) as res8, count(distinct bob.aggregate_timestamp_0) as res9 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select count(distinct alice.aggregate_int_0) as res0, count(distinct bob.aggregate_int_0) as res1, count(distinct alice.aggregate_float_0) as res2, count(distinct bob.aggregate_float_0) as res3, count(distinct alice.aggregate_string_0) as res4, count(distinct bob.aggregate_string_0) as res5, count(distinct alice.aggregate_datetime_0) as res6, count(distinct bob.aggregate_datetime_0) as res7, count(distinct alice.aggregate_timestamp_0) as res8, count(distinct bob.aggregate_timestamp_0) as res9 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "count & distinct & if after join",
      "query": "select count(distinct (if(alice.encrypt_int_0>1, bob.join_string_0, 'aaaaa'))) as cd from alice_tbl_0 as alice inner join bob_tbl_0 as bob on alice.join_string_0=bob.join_string_0 group by bob.groupby_int_0;",
      "mysql_query": "select count(distinct (if(alice.encrypt_int_0>1, bob.join_string_0, 'aaaaa'))) as cd from alice.tbl_0 as alice inner join bob.tbl_0 as bob on alice.join_string_0=bob.join_string_0 group by bob.groupby_int_0;"
    },
    {
      "name": "logic after join",
      "query": "select alice.plain_int_0 as res0, alice.plain_int_0 > bob.plain_int_0 and alice.plain_int_0 >= bob.plain_int_0 as and_log, (alice.plain_int_0 <= bob.plain_int_0) or (alice.plain_int_0 <> bob.plain_int_0) as or_log from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select alice.plain_int_0 as res0, alice.plain_int_0 > bob.plain_int_0 and alice.plain_int_0 >= bob.plain_int_0 as and_log, (alice.plain_int_0 <= bob.plain_int_0) or (alice.plain_int_0 <> bob.plain_int_0) as or_log from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "cast(private) after join",
      "query": "select cast(alice.plain_int_0 as decimal(64,30)) as df, cast(alice.plain_int_0 as char) as ds from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select cast(alice.plain_int_0 as decimal(64,30)) as df, cast(alice.plain_int_0 as char) as ds from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "in after join",
      "query": "select alice.compare_int_0 in (select compare_int_0 from bob_tbl_0) as in_column from alice_tbl_0 as alice;",
      "mysql_query": "select  alice.compare_int_0 in (select compare_int_0 from bob.tbl_0) as in_column from alice.tbl_0 as alice;"
    },
    {
      "name": "not in after join",
      "query": "select alice.compare_int_0 not in (select compare_int_0 from bob_tbl_0) as not_in_column from alice_tbl_0 as alice;",
      "mysql_query": "select alice.compare_int_0 not in (select compare_int_0 from bob.tbl_0) as not_in_column from alice.tbl_0 as alice;"
    },
    {
      "name": "in list after join",
      "query": "select alice.plain_int_0 in (100, 12.3, 10) as res from alice_tbl_0 as alice, bob_tbl_0 as bob where alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select alice.plain_int_0 in (100, 12.3, 10) as res from alice.tbl_0 as alice, bob.tbl_0 as bob where alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "null after join",
      "query": "select bob.plain_int_0 is not null as c1, ifnull(bob.plain_string_0, 'null_str') as c2, coalesce(bob.plain_float_0, bob.plain_float_1, 1.0) as c3 from alice_tbl_0 as alice left join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0;",
      "mysql_query": "select bob.plain_int_0 is not null as c1, ifnull(bob.plain_string_0, 'null_str') as c2, coalesce(bob.plain_float_0, bob.plain_float_1, 1.0) as c3 from alice.tbl_0 as alice left join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "compare(less) before join",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 < bob.compare_int_1 and alice.compare_float_0 < bob.compare_int_1 and alice.compare_float_0 < bob.compare_float_1 and alice.compare_datetime_0 < bob.compare_datetime_0 and alice.compare_timestamp_0 < bob.compare_timestamp_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 < bob.compare_int_1 and alice.compare_float_0 < bob.compare_int_1 and alice.compare_float_0 < bob.compare_float_1 and alice.compare_datetime_0 < bob.compare_datetime_0 and alice.compare_timestamp_0 < bob.compare_timestamp_0;"
    },
    {
      "name": "compare(greater) before join",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_1 > bob.compare_int_0 and alice.compare_float_1 > bob.compare_int_0 and alice.compare_float_1 > bob.compare_float_0 and alice.compare_datetime_0 > bob.compare_datetime_0 and alice.compare_timestamp_0 > bob.compare_timestamp_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_1 > bob.compare_int_0 and alice.compare_float_1 > bob.compare_int_0 and alice.compare_float_1 > bob.compare_float_0 and alice.compare_datetime_0 > bob.compare_datetime_0 and alice.compare_timestamp_0 > bob.compare_timestamp_0;"
    },
    {
      "name": "compare(less or equal) before join",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 <= bob.compare_int_1 and alice.compare_float_0 <= bob.compare_int_1 and alice.compare_float_0 <= bob.compare_float_1 and alice.compare_datetime_0 <= bob.compare_datetime_0 and alice.compare_timestamp_0 <= bob.compare_timestamp_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 <= bob.compare_int_1 and alice.compare_float_0 <= bob.compare_int_1 and alice.compare_float_0 <= bob.compare_float_1 and alice.compare_datetime_0 <= bob.compare_datetime_0 and alice.compare_timestamp_0 <= bob.compare_timestamp_0;"
    },
    {
      "name": "compare(greater or equal) before join",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_1 >= bob.compare_int_0 and alice.compare_float_1 >= bob.compare_int_0 and alice.compare_float_1 >= bob.compare_float_0 and alice.compare_datetime_0 >= bob.compare_datetime_0 and alice.compare_timestamp_0 >= bob.compare_timestamp_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_1 >= bob.compare_int_0 and alice.compare_float_1 >= bob.compare_int_0 and alice.compare_float_1 >= bob.compare_float_0 and alice.compare_datetime_0 >= bob.compare_datetime_0 and alice.compare_timestamp_0 >= bob.compare_timestamp_0;"
    },
    {
      "name": "compare(not equal) before join",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_1 <> bob.compare_int_0 and alice.compare_float_1 <> bob.compare_int_0 and alice.compare_float_1 <> bob.compare_float_0 and alice.compare_datetime_0 <> bob.compare_datetime_0 and alice.compare_timestamp_0 <> bob.compare_timestamp_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_1 <> bob.compare_int_0 and alice.compare_float_1 <> bob.compare_int_0 and alice.compare_float_1 <> bob.compare_float_0 and alice.compare_datetime_0 <> bob.compare_datetime_0 and alice.compare_timestamp_0 <> bob.compare_timestamp_0;"
    },
    {
      "name": "arithmetic(plus) before join ",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 + bob.compare_int_0 > bob.compare_int_0 and alice.compare_int_0 + bob.compare_float_0 > bob.compare_int_0 and alice.compare_float_0 + bob.compare_float_0 > bob.compare_int_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 + bob.compare_int_0 > bob.compare_int_0 and alice.compare_int_0 + bob.compare_float_0 > bob.compare_int_0 and alice.compare_float_0 + bob.compare_float_0 > bob.compare_int_0;"
    },
    {
      "name": "arithmetic(subtract) before join ",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 - bob.compare_int_0 > bob.compare_int_0 or alice.compare_int_0 - bob.compare_float_0 > bob.compare_int_0 or alice.compare_float_0 - bob.compare_float_0 > bob.compare_int_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 - bob.compare_int_0 > bob.compare_int_0 or alice.compare_int_0 - bob.compare_float_0 > bob.compare_int_0 or alice.compare_float_0 - bob.compare_float_0 > bob.compare_int_0;"
    },
    {
      "name": "arithmetic(multiply) before join ",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 * bob.compare_int_0 > bob.compare_int_0 and alice.compare_int_0 * bob.compare_float_0 > bob.compare_int_0 and alice.compare_float_0 * bob.compare_float_0 > bob.compare_int_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 * bob.compare_int_0 > bob.compare_int_0 and alice.compare_int_0 * bob.compare_float_0 > bob.compare_int_0 and alice.compare_float_0 * bob.compare_float_0 > bob.compare_int_0;"
    },
    {
      "name": "arithmetic(divide) before join ",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 / (bob.compare_int_0 * bob.compare_int_0 + 1) > bob.compare_int_0 or alice.compare_int_0 /(bob.compare_float_0 * bob.compare_float_0 + 1) > bob.compare_int_0 or alice.compare_float_0 /(bob.compare_float_0 * bob.compare_float_0 + 1) > bob.compare_int_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 / (bob.compare_int_0 * bob.compare_int_0 + 1) > bob.compare_int_0 or alice.compare_int_0 /(bob.compare_float_0 * bob.compare_float_0 + 1) > bob.compare_int_0 or alice.compare_float_0 /(bob.compare_float_0 * bob.compare_float_0 + 1) > bob.compare_int_0;"
    },
    {
      "name": "arithmetic(intdiv) before join ",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 div (bob.compare_int_0 + 200) > bob.compare_int_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 div (bob.compare_int_0 + 200) > bob.compare_int_0;"
    },
    {
      "name": "null before join",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.join_string_0 is null;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.join_string_0 is null;"
    },
    {
      "name": "not null before join",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where bob.plain_string_0 is not null;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where bob.plain_string_0 is not null;"
    },
    {
      "name": "apply in before join",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice where alice.compare_int_0 in (select bob.compare_int_0 from bob_tbl_0 as bob);",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice where alice.compare_int_0 in (select bob.compare_int_0 from bob.tbl_0 as bob);"
    },
    {
      "name": "apply not in before join",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice where alice.compare_int_0 not in (select bob.compare_int_0 from bob_tbl_0 as bob);",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice where alice.compare_int_0 not in (select bob.compare_int_0 from bob.tbl_0 as bob);"
    },
    {
      "name": "in list before join",
      "query": "select alice.join_string_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.join_string_0 in (\"ejjepeki\", \"ma\");",
      "mysql_query": "select alice.join_string_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.join_string_0 in (\"ejjepeki\", \"ma\");"
    },
    {
      "name": "where(null)",
      "query": "select alice.plain_int_0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select alice.plain_int_0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "compare (less) where(null)",
      "query": "select alice.compare_int_0 < bob.compare_int_0 as res0 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select alice.compare_int_0 < bob.compare_int_0 as res0 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "compare (greater) where(null)",
      "query": "select alice.compare_int_0 > bob.compare_int_0 as res0  from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select alice.compare_int_0 > bob.compare_int_0 as res0  from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "compare (less or equal) where(null)",
      "query": "select alice.compare_int_0 <= bob.compare_int_0 as res0, alice.compare_int_0 <= bob.compare_float_0 as res1, alice.compare_float_0 <= bob.compare_float_0 as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select alice.compare_int_0 <= bob.compare_int_0 as res0, alice.compare_int_0 <= bob.compare_float_0 as res1, alice.compare_float_0 <= bob.compare_float_0 as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "compare (greater or equal) where(null)",
      "query": "select alice.compare_int_0 >= bob.compare_int_0 as res0, alice.compare_int_0 >= bob.compare_float_0 as res1, alice.compare_float_0 >= bob.compare_float_0 as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select alice.compare_int_0 >= bob.compare_int_0 as res0, alice.compare_int_0 >= bob.compare_float_0 as res1, alice.compare_float_0 >= bob.compare_float_0 as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "compare (not equal) where(null)",
      "query": "select alice.compare_int_0 <> bob.compare_int_0 as res0, alice.compare_int_0 <> bob.compare_float_0 as res1, alice.compare_float_0 <> bob.compare_float_0 as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select alice.compare_int_0 <> bob.compare_int_0 as res0, alice.compare_int_0 <> bob.compare_float_0 as res1, alice.compare_float_0 <> bob.compare_float_0 as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "arithmetic (plus) where(null)",
      "query": "select bob.plain_int_0 + alice.plain_int_0 as res0, alice.plain_int_0 + bob.plain_float_0 as res1, alice.plain_float_0 + bob.plain_float_0 as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select bob.plain_int_0 + alice.plain_int_0 as res0, alice.plain_int_0 + bob.plain_float_0 as res1, alice.plain_float_0 + bob.plain_float_0 as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "arithmetic (subtract) where(null)",
      "query": "select bob.plain_int_0 - alice.plain_int_0 as res0, alice.plain_int_0 - bob.plain_float_0 as res1, alice.plain_float_0 - bob.plain_float_0 as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select bob.plain_int_0 - alice.plain_int_0 as res0, alice.plain_int_0 - bob.plain_float_0 as res1, alice.plain_float_0 - bob.plain_float_0 as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "arithmetic (multiply) where(null)",
      "query": "select bob.plain_int_0 * alice.plain_int_0 as res0, alice.plain_int_0 * bob.plain_float_0 as res1, alice.plain_float_0 * bob.plain_float_0 as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select bob.plain_int_0 * alice.plain_int_0 as res0, alice.plain_int_0 * bob.plain_float_0 as res1, alice.plain_float_0 * bob.plain_float_0 as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "arithmetic (divide) where(null)",
      "query": "select bob.plain_int_0 / (alice.plain_int_0 * alice.plain_int_0 + 1) as res0, alice.plain_int_0 / (bob.plain_float_0 * bob.plain_float_0 + 1) as res1, alice.plain_float_0 / (bob.plain_float_0 * bob.plain_float_0 + 1) as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select bob.plain_int_0 / (alice.plain_int_0 * alice.plain_int_0 + 1) as res0, alice.plain_int_0 / (bob.plain_float_0 * bob.plain_float_0 + 1) as res1, alice.plain_float_0 / (bob.plain_float_0 * bob.plain_float_0 + 1) as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "logic where(null)",
      "query": "select alice.plain_int_0 as res0, alice.plain_int_0 > bob.plain_int_0 and alice.plain_int_0 >= bob.plain_int_0 as and_log, (alice.plain_int_0 <= bob.plain_int_0) or (alice.plain_int_0 <> bob.plain_int_0) as or_log from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;",
      "mysql_query": "select alice.plain_int_0 as res0, alice.plain_int_0 > bob.plain_int_0 and alice.plain_int_0 >= bob.plain_int_0 as and_log, (alice.plain_int_0 <= bob.plain_int_0) or (alice.plain_int_0 <> bob.plain_int_0) as or_log from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0 where alice.compare_int_0 > bob.compare_int_0;"
    },
    {
      "name": "in where(null)",
      "query": "select alice.compare_int_0 in (select compare_int_0 from bob_tbl_0) as in_column from alice_tbl_0 as alice where alice.compare_int_0 > 1000;",
      "mysql_query": "select  alice.compare_int_0 in (select compare_int_0 from bob.tbl_0) as in_column from alice.tbl_0 as alice where alice.compare_int_0 > 1000;"
    },
    {
      "name": "not in where(null)",
      "query": "select alice.compare_int_0 not in (select compare_int_0 from bob_tbl_0) as not_in_column from alice_tbl_0 as alice where alice.compare_int_0 > 1000;",
      "mysql_query": "select alice.compare_int_0 not in (select compare_int_0 from bob.tbl_0) as not_in_column from alice.tbl_0 as alice where alice.compare_int_0 > 1000;"
    },
    {
      "name": "agg with group by(long), private group by",
      "query": "select ta.groupby_int_0, sum(ta.aggregate_int_0) as b, max(ta.aggregate_int_0) as a, min(ta.aggregate_int_0) as d from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_int_0",
      "mysql_query": "select ta.groupby_int_0, sum(ta.aggregate_int_0) as b, max(ta.aggregate_int_0) as a, min(ta.aggregate_int_0) as d from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_int_0 having count(*) >= 4"
    },
    {
      "name": "agg with group by(float), private group by",
      "query": "select ta.groupby_int_0, sum(ta.aggregate_float_0) as b, max(ta.aggregate_float_0 + ta.aggregate_float_0) as a, min(ta.aggregate_float_0) as d from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_int_0",
      "mysql_query": "select ta.groupby_int_0, sum(ta.aggregate_float_0) as b, max(ta.aggregate_float_0 + ta.aggregate_float_0) as a, min(ta.aggregate_float_0) as d from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_int_0 having count(*) >= 4"
    },
    {
      "name": "agg with group by(string), private group by",
      "query": "select ta.groupby_string_0, count(*) as c, count(distinct ta.aggregate_int_0) as cd, sum(ta.aggregate_int_0) as sum, min(ta.aggregate_int_0) as min, max(ta.aggregate_int_0) as max, avg(ta.aggregate_int_0) as avg from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_string_0",
      "mysql_query": "select ta.groupby_string_0, count(*) as c, count(distinct ta.aggregate_int_0) as cd, sum(ta.aggregate_int_0) as sum, min(ta.aggregate_int_0) as min, max(ta.aggregate_int_0) as max, avg(ta.aggregate_int_0) as avg from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_string_0 having count(*) >= 4"
    },
    {
      "name": "agg with group by(datetime), private group by",
      "query": "select ta.groupby_datetime_0, count(*) as c, count(distinct ta.aggregate_int_0) as cd, sum(ta.aggregate_int_0) as sum, min(ta.aggregate_int_0) as min, max(ta.aggregate_int_0) as max, avg(ta.aggregate_int_0) as avg from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_datetime_0",
      "mysql_query": "select ta.groupby_datetime_0, count(*) as c, count(distinct ta.aggregate_int_0) as cd, sum(ta.aggregate_int_0) as sum, min(ta.aggregate_int_0) as min, max(ta.aggregate_int_0) as max, avg(ta.aggregate_int_0) as avg from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_datetime_0 having count(*) >= 4"
    },
    {
      "name": "agg with group by(string2), oblivious group by",
      "query": "select ta.groupby_string_0,tb.groupby_string_0, count(*) as c, count(distinct ta.aggregate_int_0) as cd, sum(ta.aggregate_int_0) as sum, min(ta.aggregate_int_0) as min, max(ta.aggregate_int_0) as max, avg(ta.aggregate_int_0) as avg from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_string_0,tb.groupby_string_0",
      "mysql_query": "select ta.groupby_string_0,tb.groupby_string_0, count(*) as c, count(distinct ta.aggregate_int_0) as cd, sum(ta.aggregate_int_0) as sum, min(ta.aggregate_int_0) as min, max(ta.aggregate_int_0) as max, avg(ta.aggregate_int_0) as avg from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_string_0,tb.groupby_string_0 having count(*) >= 4"
    },
    {
      "name": "key merge, oblivious group by",
      "query": "select ta.groupby_int_0, ta.groupby_string_0, tb.groupby_string_0 as tbs, count(*) as c, count(distinct ta.aggregate_int_0) as cd, sum(ta.aggregate_int_0) as sum, min(ta.aggregate_int_0) as min, max(ta.aggregate_int_0) as max, avg(ta.aggregate_int_0) as avg  from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_int_0, ta.groupby_string_0, tb.groupby_string_0;",
      "mysql_query": "select ta.groupby_int_0, ta.groupby_string_0, tb.groupby_string_0 as tbs, count(*) as c, count(distinct ta.aggregate_int_0) as cd, sum(ta.aggregate_int_0) as sum, min(ta.aggregate_int_0) as min, max(ta.aggregate_int_0) as max, avg(ta.aggregate_int_0) as avg from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.plain_int_0 = tb.plain_int_0 group by ta.groupby_int_0, ta.groupby_string_0, tb.groupby_string_0 having count(*) >= 4"
    },
    {
      "name": "he group by",
      "query": "select ta.groupby_string_0, sum(tb.aggregate_int_0) as sl, sum(tb.aggregate_float_0) as sf, sum(ta.compare_int_0 > tb.compare_int_0) as sc, count(tb.encrypt_int_0) as c from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.join_int_0 = tb.join_int_0 group by ta.groupby_string_0",
      "mysql_query": "select ta.groupby_string_0, sum(tb.aggregate_int_0) as sl, sum(tb.aggregate_float_0) as sf, sum(ta.compare_int_0 > tb.compare_int_0) as sc, count(tb.encrypt_int_0) as c from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.join_int_0 = tb.join_int_0 group by ta.groupby_string_0 having count(*) >= 4;"
    },
    {
      "name": "select plain data from another party",
      "query": "select plain_int_0, plain_string_0, plain_float_0, plain_datetime_0, plain_timestamp_0 from bob_tbl_0",
      "mysql_query": "select plain_int_0, plain_string_0, plain_float_0, plain_datetime_0, plain_timestamp_0 from bob.tbl_0"
    },
    {
      "name": "union all tests",
      "query": "select ta.plain_int_0 from alice_tbl_0 as ta union all select tb.plain_int_0 from bob_tbl_0 as tb",
      "mysql_query": "select ta.plain_int_0 from alice.tbl_0 as ta union all select tb.plain_int_0 from bob.tbl_0 as tb"
    },
    {
      "name": "cast(secret) after union",
      "query": "select cast(u.plain_int_0 as decimal) as fd from  (select ta.plain_int_0 from alice_tbl_0 as ta union all select tb.plain_int_0 from bob_tbl_0 as tb) as u",
      "mysql_query": "select cast(u.plain_int_0 as decimal) as fd from  (select ta.plain_int_0 from  alice.tbl_0 as ta union all select tb.plain_int_0 from bob.tbl_0 as tb) as u;"
    },
    {
      "name": "union tests",
      "query": "select ta.plain_int_0 from alice_tbl_0 as ta union select tb.plain_int_0 from bob_tbl_0 as tb",
      "mysql_query": "select ta.plain_int_0 from alice.tbl_0 as ta union select tb.plain_int_0 from bob.tbl_0 as tb"
    },
    {
      "name": "distinct tests",
      "query": "select distinct plain_int_0 from (select ta.plain_int_0 from alice_tbl_0 as ta union all select tb.plain_int_0 from bob_tbl_0 as tb) as u",
      "mysql_query": "select distinct plain_int_0 from (select ta.plain_int_0 from alice.tbl_0 as ta union all select tb.plain_int_0 from bob.tbl_0 as tb) as u"
    },
    {
      "name": "agg func after union all tests",
      "query": "select count(*) as cc, max(aggregate_int_0) as mm from (select aggregate_int_0, groupby_int_0 from alice_tbl_0 union all select aggregate_int_0, groupby_int_0 from bob_tbl_1) as u",
      "mysql_query": "select count(*) as cc, max(aggregate_int_0) as mm from (select aggregate_int_0, groupby_int_0 from alice.tbl_0 union all select aggregate_int_0, groupby_int_0 from bob.tbl_1) as u having count(*) >= 4"
    },
    {
      "name": "group by/agg after union all tests",
      "query": "select count(*) as cc, max(groupby_int_0) as mm from (select aggregate_int_0, groupby_int_0 from alice_tbl_0 union all select aggregate_int_0, groupby_int_0 from bob_tbl_1) as u group by u.groupby_int_0",
      "mysql_query": "select count(*) as cc, max(groupby_int_0) as mm from (select aggregate_int_0, groupby_int_0 from alice.tbl_0 union all select aggregate_int_0, groupby_int_0 from bob.tbl_1) as u group by u.groupby_int_0 having count(*) >= 4"
    },
    {
      "name": "if after join",
      "query": "select if(ta.plain_int_0, tb.plain_int_0, ta.plain_int_0) as res from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.join_int_0 = tb.join_int_0",
      "mysql_query": "select if(ta.plain_int_0, tb.plain_int_0, ta.plain_int_0) as res from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.join_int_0 = tb.join_int_0"
    },
    {
      "name": "if (compare) after join",
      "query": "select if(ta.compare_int_0 > tb.compare_int_0, ta.plain_int_0, tb.plain_int_0) as res from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.join_int_0 = tb.join_int_0",
      "mysql_query": "select if(ta.compare_int_0 > tb.compare_int_0, ta.plain_int_0, tb.plain_int_0) as res from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.join_int_0 = tb.join_int_0"
    },
    {
      "name": "case when after join",
      "query": "select case when alice.compare_int_0 > bob.compare_int_0 then alice.plain_int_0 else bob.plain_int_0 end as case_when1, case when alice.compare_int_0 then 1 else 0 end as case_when2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0",
      "mysql_query": "select case when alice.compare_int_0 > bob.compare_int_0 then alice.plain_int_0 else bob.plain_int_0 end as case_when1, case when alice.compare_int_0 then 1 else 0 end as case_when2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "case when(multi condition) after join",
      "query": "select case when alice.compare_int_0 > bob.compare_int_0 then alice.plain_int_0 when alice.plain_int_0 > 50 then bob.plain_int_0 when alice.plain_int_0 then 1 else 0 end as res1 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_int_0 = bob.join_int_0",
      "mysql_query": "select case when alice.compare_int_0 > bob.compare_int_0 then alice.plain_int_0 when alice.plain_int_0 > 50 then bob.plain_int_0 when alice.plain_int_0 then 1 else 0 end as res1 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_int_0 = bob.join_int_0;"
    },
    {
      "name": "date func (now, curdate)",
      "query": "select alice.plain_datetime_0 < now() as res1, alice.plain_datetime_0 < curdate() as res2 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_datetime_0 = bob.join_datetime_0;",
      "mysql_query": "select alice.plain_datetime_0 < now() as res1, alice.plain_datetime_0 < curdate() as res2 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_datetime_0 = bob.join_datetime_0;"
    },
    {
      "name": "date func (adddate, subdate)",
      "query": "select adddate(alice.plain_datetime_0, interval 10 day) as res1, adddate(bob.plain_datetime_0, interval 10 day) as res2, subdate(alice.plain_datetime_0, interval 10 day) as res3, subdate(bob.plain_datetime_0, interval 10 day) as res4 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_datetime_0 = bob.join_datetime_0;",
      "mysql_query": "select adddate(alice.plain_datetime_0, interval 10 day) as res1, adddate(bob.plain_datetime_0, interval 10 day) as res2, subdate(alice.plain_datetime_0, interval 10 day) as res3, subdate(bob.plain_datetime_0, interval 10 day) as res4 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_datetime_0 = bob.join_datetime_0;"
    },
    {
      "name": "date func (datediff)",
      "query": "select datediff(alice.plain_datetime_0, bob.plain_datetime_1) as res1 from alice_tbl_0 as alice join bob_tbl_0 as bob on alice.join_datetime_0 = bob.join_datetime_0;",
      "mysql_query": "select datediff(alice.plain_datetime_0, bob.plain_datetime_1) as res1 from alice.tbl_0 as alice join bob.tbl_0 as bob on alice.join_datetime_0 = bob.join_datetime_0;"
    },
    {
      "name": "negative constant",
      "query": "select if(ta.plain_float_0, -1.0, -ta.plain_float_0) as res from alice_tbl_0 as ta join bob_tbl_0 as tb on ta.join_int_0 = tb.join_int_0;",
      "mysql_query": "select if(ta.plain_float_0, -1.0, -ta.plain_float_0) as res from alice.tbl_0 as ta join bob.tbl_0 as tb on ta.join_int_0 = tb.join_int_0;"
    }
  ]
}