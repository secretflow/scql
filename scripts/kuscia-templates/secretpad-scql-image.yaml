apiVersion: kuscia.secretflow/v1alpha1
kind: AppImage
metadata:
  name: scql-image
spec:
  configTemplates:
    agentConf: |-
      task_config: "{{.TASK_INPUT_CONFIG}}"
      #task_config: "{{.INPUT_CONFIG}}"
      cluster_define: "{{.TASK_CLUSTER_DEFINE}}"
      #cluster_define: "{{.CLUSTER_DEFINE}}"
      app_image: scql-image
      wait_timeout: 60s
      wait_query_timeout: 1h
      kuscia:
        endpoint: kusciaapi:8083
        tls_mode: {{.KUSCIA_API_PROTOCOL}}
        cert: {{.CLIENT_CERT_FILE}}
        key: {{.CLIENT_PRIVATE_KEY_FILE}}
        cacert: {{.TRUSTED_CA_FILE}}
        token: {{.KUSCIA_API_TOKEN}}
    brokerConf: |-
      intra_server:
       protocol: http
       host: 0.0.0.0
       port: {{{.ALLOCATED_PORTS.ports[name=intra].port}}}
      inter_server:
       port: {{{.ALLOCATED_PORTS.ports[name=inter].port}}}
       protocol: http
       cert_file: "{{.SERVER_CERT_FILE}}"
       key_file: "{{.SERVER_PRIVATE_KEY_FILE}}"
      inter_timeout: 30s
      party_code: {{.KUSCIA_DOMAIN_ID}}
      private_key_data: {{.KUSCIA_DOMAIN_KEY_DATA}}
      intra_host: "{{{.CLUSTER_DEFINE.parties[.CLUSTER_DEFINE.selfPartyIdx].services[portName=intra].endpoints[0]}}}"
      discovery:
        type: kuscia
        kuscia:
          endpoint: kusciaapi:8083
          tls_mode: {{.KUSCIA_API_PROTOCOL}}
          cert: {{.CLIENT_CERT_FILE}}
          key: {{.CLIENT_PRIVATE_KEY_FILE}}
          cacert: {{.TRUSTED_CA_FILE}}
          token: {{.KUSCIA_API_TOKEN}}
          cluster_define: "{{.CLUSTER_DEFINE}}"
      engine:
        timeout: 120s
        protocol: http
        content_type: application/json
        scheduler: kuscia
        kuscia_scheduler:
          endpoint: kusciaapi:8083
          tls_mode: {{.KUSCIA_API_PROTOCOL}}
          cert: {{.CLIENT_CERT_FILE}}
          key: {{.CLIENT_PRIVATE_KEY_FILE}}
          cacert: {{.TRUSTED_CA_FILE}}
          token: {{.KUSCIA_API_TOKEN}}
          app_image: scql-image
          keep_job_alive_for_debug: false
      storage:
        type: sqlite
        conn_str: "/tmp/broker.db"
        max_idle_conns: 10
        max_open_conns: 100
        conn_max_idle_time: 2m
        conn_max_lifetime: 5m
    engineConf: |-
      --listen_port={{{.ALLOCATED_PORTS.ports[name=engineport].port}}}
      --enable_separate_link_port=true
      --link_port={{{.ALLOCATED_PORTS.ports[name=linkport].port}}}
      --enable_driver_authorization=false
      # NOTE: set --datasource_router to kusciadatamesh if use kuscia datamesh
      --datasource_router=kusciadatamesh
      --kuscia_datamesh_endpoint=datamesh:8071
      --kuscia_datamesh_client_cert_path={{.CLIENT_CERT_FILE}}
      --kuscia_datamesh_client_key_path={{.CLIENT_PRIVATE_KEY_FILE}}
      --kuscia_datamesh_cacert_path={{.TRUSTED_CA_FILE}}
      --enable_restricted_read_path=false
      # party authentication flags
      --enable_self_auth=false
      --enable_peer_auth=false
      # https flags
      --server_enable_ssl=false
      --peer_engine_enable_ssl_as_client=false
      --driver_enable_ssl_as_client=false
      --peer_engine_protocol=http:proto
      --peer_engine_connection_type=pooled
      --peer_engine_load_balancer=rr
  deployTemplates:
    - name: agent
      role: agent
      replicas: 1
      spec:
        containers:
          - command:
              - /home/admin/bin/agent
              - -config=/work/configs/config.yml
            configVolumeMounts:
              - mountPath: /work/configs/config.yml
                subPath: agentConf
            name: agent
            workingDir: /work
        restartPolicy: Never
    - name: broker
      role: broker
      replicas: 1
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - topologyKey: kubernetes.io/hostname
        containers:
          - command:
              - /home/admin/bin/broker
              - -config=./configs/config.yml
            configVolumeMounts:
              - mountPath: /work/configs/config.yml
                subPath: brokerConf
            name: broker
            ports:
              - name: intra
                protocol: HTTP
                scope: Domain
              - name: inter
                protocol: HTTP
                scope: Cluster
            readinessProbe:
              httpGet:
                path: /health
                port: intra
            workingDir: /work
        restartPolicy: Always
    - name: engine
      role: engine
      replicas: 1
      spec:
        containers:
          - command:
              - /home/admin/bin/scqlengine
              - --flagfile=./conf/gflags.conf
            configVolumeMounts:
              - mountPath: /work/conf/gflags.conf
                subPath: engineConf
            name: engine
            # resources:
            #   requests:
            #     cpu: 1
            #     memory: 2Gi
            ports:
              - name: engineport
                protocol: HTTP
                scope: Domain
              - name: linkport
                protocol: HTTP
                scope: Cluster
            workingDir: /work
        restartPolicy: Never
  image:
    name: "docker.io/library/scqlagent"
    tag: "latest"
