# Copyright 2023 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference

version: 2.1

parameters:
  enable_regtest:
    type: boolean
    default: false

jobs:
  build_binary:
    machine:
      image: ubuntu-2204:current
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run:
          name: "Checkout devtools"
          command: git clone --depth=1 https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: Setup BuildBuddy Cache
          command: ../devtools/bazel_cache_setup.py
      - run:
          name: "Build binaries in container"
          command: |
            docker run --rm -v $(pwd):/host secretflow/scql-ci:latest bash -c "cd /host && make && bazelisk build //engine/exe:scqlengine -c opt"
      - run:
          name: "Copy binaries to workspace"
          command: |
            TARGET_ARCH=$(if [ "$(arch)" = "x86_64" ]; then echo "amd64"; else echo "arm64"; fi)
            DIR=/tmp/workspace/linux/${TARGET_ARCH}
            mkdir -p "${DIR}"
            BINARIES="engine/exe/scqlengine:scqlengine bin/scdbserver:scdbserver bin/scdbclient:scdbclient bin/broker:broker bin/brokerctl:brokerctl bin/agent:agent"
            for item in $BINARIES; do
              IFS=':' read -r src dest <<< "$item"
              cp "bazel-bin/${src}" "${DIR}/${dest}"
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - linux/*

  build_docker_image:
    machine:
      image: ubuntu-2204:current
    resource_class: large
    parameters:
      multi_arch:
        type: boolean
        default: false
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Build Docker image"
          command: |
            # Prepare build context
            mkdir -p docker_context/linux
            cp -r /tmp/workspace/linux/* docker_context/linux/
            cp docker/scql-ubuntu.Dockerfile docker_context/
            cp -r scripts/ docker_context/

            # Build image with conditional platform support
            cd docker_context
            docker buildx create --name scql-builder --use
            if [ "<< parameters.multi_arch >>" = "true" ]; then
              echo "Building multi-architecture image (amd64 + arm64)"
              docker buildx build --platform linux/amd64,linux/arm64 -f scql-ubuntu.Dockerfile -t scql:regtest .
            else
              echo "Building single architecture image (amd64 only)"
              docker buildx build --platform linux/amd64 -f scql-ubuntu.Dockerfile -t scql:regtest .
            fi

  run_regtest:
    machine:
      image: ubuntu-2204:current
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run:
          name: "Deploy services"
          command: |
            cd .ci/docker-compose
            python3 -m pip install -r requirements.txt
            python3 setup.py
            docker compose -p regtest-<< parameters.resource_class >> up -d
      - go/install:
          version: "1.24.0"
      - run:
          name: "Run Go regression tests"
          command: |
            sleep 60
            export SKIP_CONCURRENT_TEST=true
            export $(grep -v '^#' .ci/docker-compose/.env | xargs)
            go test ./cmd/regtest/... -v -count=1 -timeout=30m -args --conf=../../../.ci/docker-compose/regtest.yml

workflows:
  regtest:
    when: << pipeline.parameters.enable_regtest >>
    jobs:
      - build_binary:
          matrix:
            parameters:
              resource_class: ["xlarge"]
      - build_docker_image:
          multi_arch: false
          requires:
            - build_binary
      - run_regtest:
          requires:
            - build_docker_image
          matrix:
            parameters:
              resource_class: ["xlarge"]
