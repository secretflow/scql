# Copyright 2023 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

setup: true

orbs:
  path-filtering: circleci/path-filtering@0.1.4

parameters:
  run-regtest:
    type: boolean
    default: false

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
linux_regtest:
  machine:
    image: ubuntu-2004:2022.07.1
  resource_class: 2xlarge
  steps:
    - checkout
    - restore_cache:
        name: "Restore engine cache"
        key: engine-regtest-build-{{ arch }}-
    - run:
        name: "Checkout devtools"
        command: git clone https://github.com/secretflow/devtools.git
    - run:
        name: Decompress cache
        command: sh devtools/decompress-build-cache.sh engine_regtest_cache
    - run:
        name: "Build binary"
        command: |
          set +e
          mkdir -p image
          cp docker/scql.Dockerfile image
          docker run -d -it --name scql-dev -v $(pwd):/home/admin/dev/ -v ~/.cache/engine_regtest_cache:/root/.cache/engine_regtest_cache -w /home/admin/dev --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --cap-add=NET_ADMIN --privileged=true secretflow/release-ci:latest
          docker exec -it scql-dev bash -c "make && bazel build //engine/... -c opt --ui_event_filters=-info,-debug,-warning --disk_cache=~/.cache/engine_regtest_cache"
          docker cp scql-dev:/home/admin/dev/bazel-bin/engine/exe/scqlengine image
          docker cp scql-dev:/home/admin/dev/bin/scdbserver image
          docker cp scql-dev:/home/admin/dev/bin/scdbclient image
          docker stop scql-dev &&  docker rm scql-dev
    - run:
        name: Cleanup and compress cache
        command: |
          sh devtools/clean_disk_cache.sh ~/.cache/engine_regtest_cache
          sh devtools/compress-build-cache.sh engine_regtest_cache
    - save_cache:
        key: engine-regtest-build-{{ arch }}-{{ .Environment.CIRCLE_BUILD_NUM }}
        paths:
          - ~/.cache/engine_regtest_cache.tar.gz
    - run:
        name: "Build image"
        command: |
          cd image
          docker build -f scql.Dockerfile -t scql:latest .
    - run:
        name: "Deploy image"
        command: |
          set +e
          cd .ci/docker-compose
          docker compose -p regtest up -d
          docker ps | grep regtest
    - run:
        name: "Run regtest"
        command: |
          set +e
          sleep 1m
          export SKIP_CONCURRENT_TEST=true
          export $(grep -v '^#' .ci/docker-compose/.env | xargs)
          go test ./cmd/regtest/... -v -count=1 -timeout=30m

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  run_ut:
    when:
      not: << pipeline.parameters.run-regtest >>
    jobs:
      - path-filtering/filter:
          base-revision: main
          config-path: .circleci/unittest-config.yml
          mapping: |
            api/.* build-and-run true
            bazel/.* build-and-run true
            cmd/.* build-and-run true
            engine/.* build-and-run true
            pkg/.* build-and-run true
            .bazelrc build-and-run true
  run_regtest:
    when: << pipeline.parameters.run-regtest >>
    jobs:
      - path-filtering/filter:
          base-revision: main
          config-path: .circleci/regtest-config.yml
          mapping: |
            api/.* build-and-run true
            bazel/.* build-and-run true
            cmd/.* build-and-run true
            engine/.* build-and-run true
            pkg/.* build-and-run true
            .bazelrc build-and-run true
