# Copyright 2023 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

setup: true

orbs:
  path-filtering: circleci/path-filtering@1.2.0
  continuation: circleci/continuation@1.0.0
  codecov: codecov/codecov@5.4.3

parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""
  enable_regtest:
    type: boolean
    default: false

jobs:
  decider_check_coverage_run:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Decide which coverage jobs to run
          command: |
            mkdir -p /tmp/workspace
            echo "export RUN_GO_COVERAGE=false" > /tmp/workspace/decision.env
            echo "export RUN_CPP_COVERAGE=false" >> /tmp/workspace/decision.env

            COMMIT_SUBJECT=$(git log -1 --pretty=%s)
            echo "Commit subject: $COMMIT_SUBJECT"

            if [[ $COMMIT_SUBJECT == *"[run-go-coverage]"* || $COMMIT_SUBJECT == *"[run-coverage]"* ]]; then
              echo "Approving Go coverage job to run."
              echo "export RUN_GO_COVERAGE=true" >> /tmp/workspace/decision.env
            fi

            if [[ $COMMIT_SUBJECT == *"[run-cpp-coverage]"* || $COMMIT_SUBJECT == *"[run-coverage]"* ]]; then
              echo "Approving Cpp coverage job to run."
              echo "export RUN_CPP_COVERAGE=true" >> /tmp/workspace/decision.env
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - decision.env

  go_coverage_job_linux_amd:
    docker:
      - image: secretflow/scql-ci:latest
    resource_class: 2xlarge
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Check decision before running
          command: |
            source /tmp/workspace/decision.env
            if [ "$RUN_GO_COVERAGE" != "true" ]; then
              echo "Halting job: RUN_GO_COVERAGE is not set to true."
              circleci-agent step halt
            fi
      - checkout
      - run:
          name: "Install GPG for Codecov"
          command: apt-get update && apt-get install -y gnupg
      - run:
          name: "Run Go Test with Coverage"
          command: go test -v -coverprofile=coverage.out ./pkg/... ./contrib/...
      - codecov/upload:
          files: "coverage.out"
          flags: "go-linux-amd"

  cpp_coverage_job_linux_amd:
    docker:
      - image: secretflow/scql-ci:latest
    resource_class: 2xlarge
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Check decision before running
          command: |
            source /tmp/workspace/decision.env
            if [ "$RUN_CPP_COVERAGE" != "true" ]; then
              echo "Halting job: RUN_CPP_COVERAGE is not set to true."
              circleci-agent step halt
            fi
      - checkout
      - run:
          name: "Install GPG for Codecov"
          command: apt-get update && apt-get install -y gnupg
      - run:
          name: "Checkout devtools"
          command: git clone https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: "Setup GCS"
          command: |
            echo ${gcs_content} > ../gcs.data
            ../devtools/bazel_cache_setup.py --in_file=../gcs.data --out_file=../gcs.json --min_download
      - run:
          name: "Run Cpp Test with Coverage"
          command: bazelisk --host_jvm_args=-Xmx8g coverage //engine/... --nocache_test_results --combined_report=lcov --jobs=32
      - codecov/upload:
          files: "bazel-out/_coverage/_coverage_report.dat"
          flags: "cpp-linux-amd"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  run_ut:
    when:
      and:
        - not: << pipeline.parameters.enable_regtest >>
        - not: << pipeline.parameters.GHA_Action >>
        - not: << pipeline.parameters.GHA_Meta >>
        - not: << pipeline.parameters.GHA_Event >>
    jobs:
      - path-filtering/filter:
          base-revision: main
          tag: '3.10' # specific cimg/python
          config-path: .circleci/unittest-config.yml
          mapping: |
            api/.* run_go_ut true
            cmd/.* run_go_ut true
            pkg/.* run_go_ut true
            contrib/.* run_go_ut true
            .circleci/unittest-config.yml run_go_ut true
            bazel/.* run_cpp_ut true
            engine/.* run_cpp_ut true
            .bazelrc run_cpp_ut true
            .bazeliskrc run_cpp_ut true
            MODULE.bazel run_cpp_ut true
            .circleci/unittest-config.yml run_cpp_ut true
      - decider_check_coverage_run
      - go_coverage_job_linux_amd:
          requires:
            - decider_check_coverage_run
      - cpp_coverage_job_linux_amd:
          requires:
            - decider_check_coverage_run

  run_regtest:
    when: << pipeline.parameters.enable_regtest >>
    jobs:
      - path-filtering/filter:
          base-revision: main
          tag: '3.10'
          config-path: .circleci/regtest-config.yml
          mapping: |
            api/.* run_regtest true
            bazel/.* run_regtest true
            cmd/.* run_regtest true
            engine/.* run_regtest true
            pkg/.* run_regtest true
            .bazelrc run_regtest true
            .circleci/regtest-config.yml run_regtest true

  publish-workflow:
    when:
      equal: [ "release", << pipeline.parameters.GHA_Event >> ]
    jobs:
      - continuation/continue:
          configuration_path: .circleci/release-config.yml
          # This is mandatory to trigger a pipeline when pushing a tag
          filters:
            tags:
              only: /.*(?<!dev\d{8})$/
