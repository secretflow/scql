# Copyright 2023 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference

version: 2.1

commands:
  setup_cpp_test:
    steps:
      - run:
          name: "Checkout devtools"
          command: git clone --depth=1 https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: Setup BuildBuddy Cache
          command: ../devtools/bazel_cache_setup.py

  run_go_test:
    description: "Run go tests"
    steps:
      - run:
          name: "Go Test"
          command: |
            set +e
            go mod tidy
            echo "Running unit tests..."
            go test -mod=readonly -timeout=30m -v -short ./pkg/... ./contrib/...

  run_cpp_test:
    description: "Run cpp tests and collect artifacts on fail"
    parameters:
      extra_bazel_args:
        type: string
        default: ""
      find_executable_flag:
        type: string
        default: "-executable"
    steps:
      - run:
          name: "Cpp Test"
          command: |
            set +e
            declare -i test_status

            echo "Running unit tests..."
            bazelisk --host_jvm_args=-Xmx8g test //engine/... \
                << parameters.extra_bazel_args >> \
                --jobs=auto \
                --ui_event_filters=-info,-debug,-warning \
                --test_output=errors | tee test_result.log

            # Capture the exit status of the Bazel command
            test_status=${PIPESTATUS[0]}

            sh ../devtools/rename-junit-xml.sh
            if [ ${test_status} -ne 0 ]; then
              echo "Tests failed. Archiving binaries and logs..."
              find bazel-bin/ << parameters.find_executable_flag >> -type f -name "*_test" -print0 | xargs -0 tar -cvzf test_binary.tar.gz
              find bazel-testlogs/ -type f -name "test.log" -print0 | xargs -0 tar -cvzf test_logs.tar.gz
            fi

            exit ${test_status}

  # ref: https://support.circleci.com/hc/en-us/articles/14114124583195-How-to-set-a-custom-maximum-job-duration
  cancel_after_timeout:
    description: "Cancel job if it takes too long"
    parameters:
      timeout:
        type: string
        default: "60m"
    steps:
      - run:
          name: Set maximum job duration to << parameters.timeout >>
          background: true
          command: |
            sleep << parameters.timeout >>
            curl --request POST \
            --url https://circleci.com/api/v2/project/gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/job/$CIRCLE_BUILD_NUM/cancel \
            --header "Circle-Token: $CIRCLECI_API_TOKEN"

jobs:
  linux_go_ut:
    docker:
      - image: secretflow/scql-ci:latest
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - cancel_after_timeout:
          timeout: "20m"
      - checkout
      - run_go_test

  linux_cpp_ut:
    docker:
      - image: secretflow/scql-ci:latest
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    steps:
      - cancel_after_timeout:
          timeout: "60m"
      - checkout
      - setup_cpp_test
      - run_cpp_test:
          extra_bazel_args: "-c opt"
          find_executable_flag: "-executable"
      - store_test_results:
          path: test-results
      - store_artifacts:
          when: on_fail
          path: test_binary.tar.gz
      - store_artifacts:
          when: on_fail
          path: test_logs.tar.gz

  macOS_go_ut:
    macos:
      xcode: 16.0.0
    resource_class: m4pro.medium
    steps:
      - cancel_after_timeout:
          timeout: "20m"
      - checkout
      - run:
          name: "Install homebrew dependencies"
          command: |
            brew install wget go
      - run_go_test

  macOS_cpp_ut:
    macos:
      xcode: 16.0.0
    resource_class: m4pro.medium
    steps:
      - cancel_after_timeout:
          timeout: "60m"
      - checkout
      - run:
          name: "Install homebrew dependencies"
          command: |
            brew install bazelisk cmake ninja libomp wget go@1.24 md5sha1sum
            brew link go@1.24
      - setup_cpp_test
      - run_cpp_test:
          extra_bazel_args: ""
          find_executable_flag: "-perm +111"
      - store_test_results:
          path: test-results
      - store_artifacts:
          when: on_fail
          path: test_binary.tar.gz
      - store_artifacts:
          when: on_fail
          path: test_logs.tar.gz

workflows:
  run_go_ut:
    jobs:
      - linux_go_ut:
          matrix:
            parameters:
              resource_class: ["large", "arm.large"]
      - macOS_go_ut
  run_cpp_ut:
    jobs:
      - linux_cpp_ut:
          matrix:
            parameters:
              resource_class: ["2xlarge", "arm.2xlarge"]
      - macOS_cpp_ut
