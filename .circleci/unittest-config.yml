# Copyright 2023 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  enable_regtest:
    type: boolean
    default: false
  run_go_ut:
    type: boolean
    default: false
  run_cpp_ut:
    type: boolean
    default: false

commands:
  setup_cpp_test:
    steps:
      - run:
          name: "Checkout devtools"
          command: git clone https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: Setup GCS
          command: |
            echo ${gcs_content} > ../gcs.data
            ../devtools/bazel_cache_setup.py --in_file=../gcs.data --out_file=../gcs.json --min_download
  run_go_test:
    description: "Run go tests"
    steps:
      - run:
          name: "Go Test"
          command: |
            set +e
            go mod tidy
            go test -timeout=30m -v -short ./pkg/... ./contrib/...
  run_cpp_test:
    description: "Run cpp tests and collect artifacts"
    parameters:
      extra_bazel_args:
        type: string
        default: ""
      find_executable_flag:
        type: string
        default: "-executable"
    steps:
      - run:
          name: "Cpp Test"
          command: |
            set +e
            declare -i test_status
            bazelisk --host_jvm_args=-Xmx8g test //engine/... << parameters.extra_bazel_args >> --jobs=32 --ui_event_filters=-info,-debug,-warning --test_output=errors | tee test_result.log; test_status=${PIPESTATUS[0]}

            sh ../devtools/rename-junit-xml.sh
            find bazel-bin/ << parameters.find_executable_flag >> -type f -name "*_test" -print0 | xargs -0 tar -cvzf test_binary.tar.gz
            find bazel-testlogs/ -type f -name "test.log" -print0 | xargs -0 tar -cvzf test_logs.tar.gz
            exit ${test_status}


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  linux_go_ut:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: secretflow/scql-ci:latest
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run_go_test
  linux_cpp_ut:
    docker:
      - image: secretflow/scql-ci:latest
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - setup_cpp_test
      - run_cpp_test:
          extra_bazel_args: "-c opt"
          find_executable_flag: "-executable"
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test_binary.tar.gz
      - store_artifacts:
          path: test_logs.tar.gz
  macOS_go_ut:
    macos:
      xcode: 16.0.0
    resource_class: macos.m1.large.gen1
    steps:
      - checkout
      - run:
          name: "Install homebrew dependencies"
          command: |
            brew install wget go
      - run_go_test
  macOS_cpp_ut:
    macos:
      xcode: 16.0.0
    resource_class: macos.m1.large.gen1
    steps:
      - run:
          name: Cancel build after set time
          background: true
          command: |
            sleep 3600
            echo "Canceling workflow as too much time has elapsed"
            curl -X POST --header "Content-Type: application/json" "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${BUILD_TIMER_TOKEN}"
      - checkout
      - run:
          name: "Install homebrew dependencies"
          command: |
            brew install bazelisk cmake ninja libomp wget go@1.24 md5sha1sum
            brew link go@1.24
      - setup_cpp_test
      - run_cpp_test:
          extra_bazel_args: ""  
          find_executable_flag: "-perm +111"
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test_binary.tar.gz
      - store_artifacts:
          path: test_logs.tar.gz

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  run_go_ut:
    when: << pipeline.parameters.run_go_ut >>
    jobs:
      - linux_go_ut:
          matrix:
            parameters:
              resource_class: ["2xlarge", "arm-xlarge"]
      - macOS_go_ut
  run_cpp_ut:
    when: << pipeline.parameters.run_cpp_ut >>
    jobs:
      - linux_cpp_ut:
          matrix:
            parameters:
              resource_class: ["2xlarge", "arm-xlarge"]
      - macOS_cpp_ut