# Copyright 2025 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference

version: 2.1

orbs:
  coveralls: coveralls/coveralls@2.2.5

commands:
  setup_cpp_test:
    steps:
      - run:
          name: "Checkout devtools"
          command: git clone --depth=1 https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: Setup BuildBuddy Cache
          command: ../devtools/bazel_cache_setup.py

  run_go_test:
    description: "Run go cov tests"
    steps:
      - run:
          name: "Go Cov Test"
          command: |
            set +e
            go mod tidy
            echo "Running tests with coverage..."
            go test -timeout=30m -v -cover -race -coverprofile=coverage.tmp ./pkg/... ./contrib/...
            cat coverage.tmp | grep -v '\.pb\.go:\|_mock\.go:' > coverage.out
            gcov2lcov -infile=coverage.out -outfile=coverage.lcov

  run_cpp_test:
    description: "Run cpp tests and collect artifacts"
    parameters:
      extra_bazel_args:
        type: string
        default: ""
      find_executable_flag:
        type: string
        default: "-executable"
    steps:
      - run:
          name: "Cpp Test"
          command: |
            set +e
            declare -i test_status

            echo "Running tests with coverage..."
            bazelisk --host_jvm_args=-Xmx8g coverage //engine/... \
                << parameters.extra_bazel_args >> \
                --combined_report=lcov \
                --jobs=auto \
                --ui_event_filters=-info,-debug,-warning \
                --test_output=errors | tee test_result.log

            # Capture the exit status of the Bazel command
            test_status=${PIPESTATUS[0]}
            if [ ${test_status} -eq 0 ]; then
              echo "Processing coverage..."
              lcov --remove bazel-out/_coverage/_coverage_report.dat '*.pb.h' '*.pb.cc' -o bazel-out/_coverage/_coverage_report_filtered.dat
            else
              echo "Bazel coverage failed, skipping lcov processing."
            fi

            sh ../devtools/rename-junit-xml.sh
            find bazel-bin/ << parameters.find_executable_flag >> -type f -name "*_test" -print0 | xargs -0 tar -cvzf test_binary.tar.gz
            find bazel-testlogs/ -type f -name "test.log" -print0 | xargs -0 tar -cvzf test_logs.tar.gz
            exit ${test_status}

jobs:
  linux_go_cov:
    docker:
      - image: secretflow/scql-ci:latest
    resource_class: "2xlarge"
    steps:
      - checkout
      - run:
          name: Install gcov2lcov
          command: go install github.com/jandelgado/gcov2lcov@latest
      - run_go_test
      - coveralls/upload:
          coverage_file: coverage.lcov
          coverage_format: lcov
          flag_name: "go-tests"

  linux_cpp_cov:
    docker:
      - image: secretflow/scql-ci:latest
    resource_class: "2xlarge"
    steps:
      - checkout
      - run:
          name: "Install lcov"
          command: apt-get update && apt-get install -y lcov
      - setup_cpp_test
      - run_cpp_test:
          extra_bazel_args: "-c opt"
          find_executable_flag: "-executable"
      - coveralls/upload:
          coverage_file: bazel-out/_coverage/_coverage_report_filtered.dat
          coverage_format: lcov
          flag_name: "cpp-tests"
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test_binary.tar.gz
      - store_artifacts:
          path: test_logs.tar.gz

workflows:
  run_cov:
    jobs:
      - linux_go_cov
      - linux_cpp_cov
