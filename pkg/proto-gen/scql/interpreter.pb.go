// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: api/interpreter.proto

package scql

import (
	context "context"
	spu "github.com/secretflow/scql/pkg/proto-gen/spu"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PsiAlgorithmType int32

const (
	PsiAlgorithmType_AUTO PsiAlgorithmType = 0
	PsiAlgorithmType_ECDH PsiAlgorithmType = 1
	PsiAlgorithmType_OPRF PsiAlgorithmType = 2
)

// Enum value maps for PsiAlgorithmType.
var (
	PsiAlgorithmType_name = map[int32]string{
		0: "AUTO",
		1: "ECDH",
		2: "OPRF",
	}
	PsiAlgorithmType_value = map[string]int32{
		"AUTO": 0,
		"ECDH": 1,
		"OPRF": 2,
	}
)

func (x PsiAlgorithmType) Enum() *PsiAlgorithmType {
	p := new(PsiAlgorithmType)
	*p = x
	return p
}

func (x PsiAlgorithmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PsiAlgorithmType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_interpreter_proto_enumTypes[0].Descriptor()
}

func (PsiAlgorithmType) Type() protoreflect.EnumType {
	return &file_api_interpreter_proto_enumTypes[0]
}

func (x PsiAlgorithmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PsiAlgorithmType.Descriptor instead.
func (PsiAlgorithmType) EnumDescriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{0}
}

type CompileQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query               string          `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	DbName              string          `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	Issuer              *PartyId        `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	IssuerAsParticipant bool            `protobuf:"varint,4,opt,name=issuer_as_participant,json=issuerAsParticipant,proto3" json:"issuer_as_participant,omitempty"`
	SecurityConf        *SecurityConfig `protobuf:"bytes,5,opt,name=security_conf,json=securityConf,proto3" json:"security_conf,omitempty"`
	Catalog             *Catalog        `protobuf:"bytes,6,opt,name=catalog,proto3" json:"catalog,omitempty"`
	CompileOpts         *CompileOptions `protobuf:"bytes,7,opt,name=compile_opts,json=compileOpts,proto3" json:"compile_opts,omitempty"`
}

func (x *CompileQueryRequest) Reset() {
	*x = CompileQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileQueryRequest) ProtoMessage() {}

func (x *CompileQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileQueryRequest.ProtoReflect.Descriptor instead.
func (*CompileQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{0}
}

func (x *CompileQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *CompileQueryRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *CompileQueryRequest) GetIssuer() *PartyId {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *CompileQueryRequest) GetIssuerAsParticipant() bool {
	if x != nil {
		return x.IssuerAsParticipant
	}
	return false
}

func (x *CompileQueryRequest) GetSecurityConf() *SecurityConfig {
	if x != nil {
		return x.SecurityConf
	}
	return nil
}

func (x *CompileQueryRequest) GetCatalog() *Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *CompileQueryRequest) GetCompileOpts() *CompileOptions {
	if x != nil {
		return x.CompileOpts
	}
	return nil
}

type CompileQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Plan   *CompiledPlan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *CompileQueryResponse) Reset() {
	*x = CompileQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileQueryResponse) ProtoMessage() {}

func (x *CompileQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileQueryResponse.ProtoReflect.Descriptor instead.
func (*CompileQueryResponse) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{1}
}

func (x *CompileQueryResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CompileQueryResponse) GetPlan() *CompiledPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type CompiledPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema         *TableSchema         `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Warning        *Warning             `protobuf:"bytes,2,opt,name=warning,proto3" json:"warning,omitempty"`
	SpuRuntimeConf *spu.RuntimeConfig   `protobuf:"bytes,3,opt,name=spu_runtime_conf,json=spuRuntimeConf,proto3" json:"spu_runtime_conf,omitempty"`
	Parties        []*PartyId           `protobuf:"bytes,4,rep,name=parties,proto3" json:"parties,omitempty"`
	SubGraphs      map[string]*SubGraph `protobuf:"bytes,5,rep,name=sub_graphs,json=subGraphs,proto3" json:"sub_graphs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Explain        *ExplainInfo         `protobuf:"bytes,1000,opt,name=explain,proto3" json:"explain,omitempty"`
}

func (x *CompiledPlan) Reset() {
	*x = CompiledPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledPlan) ProtoMessage() {}

func (x *CompiledPlan) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledPlan.ProtoReflect.Descriptor instead.
func (*CompiledPlan) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{2}
}

func (x *CompiledPlan) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CompiledPlan) GetWarning() *Warning {
	if x != nil {
		return x.Warning
	}
	return nil
}

func (x *CompiledPlan) GetSpuRuntimeConf() *spu.RuntimeConfig {
	if x != nil {
		return x.SpuRuntimeConf
	}
	return nil
}

func (x *CompiledPlan) GetParties() []*PartyId {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *CompiledPlan) GetSubGraphs() map[string]*SubGraph {
	if x != nil {
		return x.SubGraphs
	}
	return nil
}

func (x *CompiledPlan) GetExplain() *ExplainInfo {
	if x != nil {
		return x.Explain
	}
	return nil
}

type Warning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MayAffectedByGroupThreshold bool `protobuf:"varint,1,opt,name=may_affected_by_group_threshold,json=mayAffectedByGroupThreshold,proto3" json:"may_affected_by_group_threshold,omitempty"`
}

func (x *Warning) Reset() {
	*x = Warning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warning) ProtoMessage() {}

func (x *Warning) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warning.ProtoReflect.Descriptor instead.
func (*Warning) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{3}
}

func (x *Warning) GetMayAffectedByGroupThreshold() bool {
	if x != nil {
		return x.MayAffectedByGroupThreshold
	}
	return false
}

type ExplainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExeGraphDot string `protobuf:"bytes,1,opt,name=exe_graph_dot,json=exeGraphDot,proto3" json:"exe_graph_dot,omitempty"`
}

func (x *ExplainInfo) Reset() {
	*x = ExplainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainInfo) ProtoMessage() {}

func (x *ExplainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainInfo.ProtoReflect.Descriptor instead.
func (*ExplainInfo) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{4}
}

func (x *ExplainInfo) GetExeGraphDot() string {
	if x != nil {
		return x.ExeGraphDot
	}
	return ""
}

type TableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*ColumnDesc `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *TableSchema) Reset() {
	*x = TableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchema) ProtoMessage() {}

func (x *TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchema.ProtoReflect.Descriptor instead.
func (*TableSchema) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{5}
}

func (x *TableSchema) GetColumns() []*ColumnDesc {
	if x != nil {
		return x.Columns
	}
	return nil
}

type ColumnDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ColumnDesc) Reset() {
	*x = ColumnDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnDesc) ProtoMessage() {}

func (x *ColumnDesc) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnDesc.ProtoReflect.Descriptor instead.
func (*ColumnDesc) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{6}
}

func (x *ColumnDesc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnDesc) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type OptimizerHints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PsiAlgorithmType PsiAlgorithmType `protobuf:"varint,1,opt,name=psi_algorithm_type,json=psiAlgorithmType,proto3,enum=scql.pb.PsiAlgorithmType" json:"psi_algorithm_type,omitempty"`
}

func (x *OptimizerHints) Reset() {
	*x = OptimizerHints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizerHints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizerHints) ProtoMessage() {}

func (x *OptimizerHints) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizerHints.ProtoReflect.Descriptor instead.
func (*OptimizerHints) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{7}
}

func (x *OptimizerHints) GetPsiAlgorithmType() PsiAlgorithmType {
	if x != nil {
		return x.PsiAlgorithmType
	}
	return PsiAlgorithmType_AUTO
}

type CompileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuConf            *spu.RuntimeConfig        `protobuf:"bytes,1,opt,name=spu_conf,json=spuConf,proto3" json:"spu_conf,omitempty"`
	SecurityCompromise *SecurityCompromiseConfig `protobuf:"bytes,2,opt,name=security_compromise,json=securityCompromise,proto3" json:"security_compromise,omitempty"`
	DumpExeGraph       bool                      `protobuf:"varint,3,opt,name=dump_exe_graph,json=dumpExeGraph,proto3" json:"dump_exe_graph,omitempty"`
	OptimizerHints     *OptimizerHints           `protobuf:"bytes,4,opt,name=optimizer_hints,json=optimizerHints,proto3" json:"optimizer_hints,omitempty"`
}

func (x *CompileOptions) Reset() {
	*x = CompileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileOptions) ProtoMessage() {}

func (x *CompileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileOptions.ProtoReflect.Descriptor instead.
func (*CompileOptions) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{8}
}

func (x *CompileOptions) GetSpuConf() *spu.RuntimeConfig {
	if x != nil {
		return x.SpuConf
	}
	return nil
}

func (x *CompileOptions) GetSecurityCompromise() *SecurityCompromiseConfig {
	if x != nil {
		return x.SecurityCompromise
	}
	return nil
}

func (x *CompileOptions) GetDumpExeGraph() bool {
	if x != nil {
		return x.DumpExeGraph
	}
	return false
}

func (x *CompileOptions) GetOptimizerHints() *OptimizerHints {
	if x != nil {
		return x.OptimizerHints
	}
	return nil
}

type SecurityCompromiseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevealGroupMark  bool   `protobuf:"varint,1,opt,name=reveal_group_mark,json=revealGroupMark,proto3" json:"reveal_group_mark,omitempty"`
	GroupByThreshold uint64 `protobuf:"varint,2,opt,name=group_by_threshold,json=groupByThreshold,proto3" json:"group_by_threshold,omitempty"`
}

func (x *SecurityCompromiseConfig) Reset() {
	*x = SecurityCompromiseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityCompromiseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityCompromiseConfig) ProtoMessage() {}

func (x *SecurityCompromiseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityCompromiseConfig.ProtoReflect.Descriptor instead.
func (*SecurityCompromiseConfig) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{9}
}

func (x *SecurityCompromiseConfig) GetRevealGroupMark() bool {
	if x != nil {
		return x.RevealGroupMark
	}
	return false
}

func (x *SecurityCompromiseConfig) GetGroupByThreshold() uint64 {
	if x != nil {
		return x.GroupByThreshold
	}
	return 0
}

type Catalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*TableEntry `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *Catalog) Reset() {
	*x = Catalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Catalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Catalog) ProtoMessage() {}

func (x *Catalog) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Catalog.ProtoReflect.Descriptor instead.
func (*Catalog) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{10}
}

func (x *Catalog) GetTables() []*TableEntry {
	if x != nil {
		return x.Tables
	}
	return nil
}

type TableEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName    string               `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Columns      []*TableEntry_Column `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	IsView       bool                 `protobuf:"varint,3,opt,name=is_view,json=isView,proto3" json:"is_view,omitempty"`
	SelectString string               `protobuf:"bytes,4,opt,name=select_string,json=selectString,proto3" json:"select_string,omitempty"`
	RefTable     string               `protobuf:"bytes,5,opt,name=ref_table,json=refTable,proto3" json:"ref_table,omitempty"`
	DbType       string               `protobuf:"bytes,6,opt,name=db_type,json=dbType,proto3" json:"db_type,omitempty"`
	Owner        *PartyId             `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *TableEntry) Reset() {
	*x = TableEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableEntry) ProtoMessage() {}

func (x *TableEntry) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableEntry.ProtoReflect.Descriptor instead.
func (*TableEntry) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{11}
}

func (x *TableEntry) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableEntry) GetColumns() []*TableEntry_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TableEntry) GetIsView() bool {
	if x != nil {
		return x.IsView
	}
	return false
}

func (x *TableEntry) GetSelectString() string {
	if x != nil {
		return x.SelectString
	}
	return ""
}

func (x *TableEntry) GetRefTable() string {
	if x != nil {
		return x.RefTable
	}
	return ""
}

func (x *TableEntry) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *TableEntry) GetOwner() *PartyId {
	if x != nil {
		return x.Owner
	}
	return nil
}

type TableEntry_Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type            string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	OrdinalPosition int32  `protobuf:"varint,3,opt,name=ordinal_position,json=ordinalPosition,proto3" json:"ordinal_position,omitempty"`
}

func (x *TableEntry_Column) Reset() {
	*x = TableEntry_Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_interpreter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableEntry_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableEntry_Column) ProtoMessage() {}

func (x *TableEntry_Column) ProtoReflect() protoreflect.Message {
	mi := &file_api_interpreter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableEntry_Column.ProtoReflect.Descriptor instead.
func (*TableEntry_Column) Descriptor() ([]byte, []int) {
	return file_api_interpreter_proto_rawDescGZIP(), []int{11, 0}
}

func (x *TableEntry_Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableEntry_Column) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TableEntry_Column) GetOrdinalPosition() int32 {
	if x != nil {
		return x.OrdinalPosition
	}
	return 0
}

var File_api_interpreter_proto protoreflect.FileDescriptor

var file_api_interpreter_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62,
	0x1a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6c, 0x69, 0x62, 0x73, 0x70, 0x75, 0x2f, 0x73, 0x70,
	0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x41,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63,
	0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x73, 0x22, 0x6a, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x71,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x99,
	0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2a, 0x0a,
	0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x10, 0x73, 0x70, 0x75,
	0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x70, 0x75, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x53,
	0x75, 0x62, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x71,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x1a, 0x4f, 0x0a, 0x0e, 0x53, 0x75, 0x62,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x07, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x61, 0x79, 0x5f, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x6d, 0x61, 0x79, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x31, 0x0a, 0x0b, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78,
	0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x6f, 0x74, 0x22, 0x3c,
	0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2d, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x59, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x48,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x70, 0x73, 0x69, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x73, 0x69, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x70, 0x73, 0x69,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfb, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2d, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x73, 0x70, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x52, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d,
	0x69, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x65, 0x78, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x75, 0x6d,
	0x70, 0x45, 0x78, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x40, 0x0a, 0x0f, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0e, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x18, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x65, 0x61,
	0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x61, 0x72, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0x36, 0x0a, 0x07, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2b, 0x0a, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x0a, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x1a, 0x5b, 0x0a, 0x06, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x30, 0x0a, 0x10, 0x50, 0x73, 0x69, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55,
	0x54, 0x4f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x43, 0x44, 0x48, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x4f, 0x50, 0x52, 0x46, 0x10, 0x02, 0x32, 0x61, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b,
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c,
	0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73,
	0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10, 0x5a, 0x0e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x63, 0x71, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_interpreter_proto_rawDescOnce sync.Once
	file_api_interpreter_proto_rawDescData = file_api_interpreter_proto_rawDesc
)

func file_api_interpreter_proto_rawDescGZIP() []byte {
	file_api_interpreter_proto_rawDescOnce.Do(func() {
		file_api_interpreter_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_interpreter_proto_rawDescData)
	})
	return file_api_interpreter_proto_rawDescData
}

var file_api_interpreter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_interpreter_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_api_interpreter_proto_goTypes = []interface{}{
	(PsiAlgorithmType)(0),            // 0: scql.pb.PsiAlgorithmType
	(*CompileQueryRequest)(nil),      // 1: scql.pb.CompileQueryRequest
	(*CompileQueryResponse)(nil),     // 2: scql.pb.CompileQueryResponse
	(*CompiledPlan)(nil),             // 3: scql.pb.CompiledPlan
	(*Warning)(nil),                  // 4: scql.pb.Warning
	(*ExplainInfo)(nil),              // 5: scql.pb.ExplainInfo
	(*TableSchema)(nil),              // 6: scql.pb.TableSchema
	(*ColumnDesc)(nil),               // 7: scql.pb.ColumnDesc
	(*OptimizerHints)(nil),           // 8: scql.pb.OptimizerHints
	(*CompileOptions)(nil),           // 9: scql.pb.CompileOptions
	(*SecurityCompromiseConfig)(nil), // 10: scql.pb.SecurityCompromiseConfig
	(*Catalog)(nil),                  // 11: scql.pb.Catalog
	(*TableEntry)(nil),               // 12: scql.pb.TableEntry
	nil,                              // 13: scql.pb.CompiledPlan.SubGraphsEntry
	(*TableEntry_Column)(nil),        // 14: scql.pb.TableEntry.Column
	(*PartyId)(nil),                  // 15: scql.pb.PartyId
	(*SecurityConfig)(nil),           // 16: scql.pb.SecurityConfig
	(*Status)(nil),                   // 17: scql.pb.Status
	(*spu.RuntimeConfig)(nil),        // 18: spu.RuntimeConfig
	(*SubGraph)(nil),                 // 19: scql.pb.SubGraph
}
var file_api_interpreter_proto_depIdxs = []int32{
	15, // 0: scql.pb.CompileQueryRequest.issuer:type_name -> scql.pb.PartyId
	16, // 1: scql.pb.CompileQueryRequest.security_conf:type_name -> scql.pb.SecurityConfig
	11, // 2: scql.pb.CompileQueryRequest.catalog:type_name -> scql.pb.Catalog
	9,  // 3: scql.pb.CompileQueryRequest.compile_opts:type_name -> scql.pb.CompileOptions
	17, // 4: scql.pb.CompileQueryResponse.status:type_name -> scql.pb.Status
	3,  // 5: scql.pb.CompileQueryResponse.plan:type_name -> scql.pb.CompiledPlan
	6,  // 6: scql.pb.CompiledPlan.schema:type_name -> scql.pb.TableSchema
	4,  // 7: scql.pb.CompiledPlan.warning:type_name -> scql.pb.Warning
	18, // 8: scql.pb.CompiledPlan.spu_runtime_conf:type_name -> spu.RuntimeConfig
	15, // 9: scql.pb.CompiledPlan.parties:type_name -> scql.pb.PartyId
	13, // 10: scql.pb.CompiledPlan.sub_graphs:type_name -> scql.pb.CompiledPlan.SubGraphsEntry
	5,  // 11: scql.pb.CompiledPlan.explain:type_name -> scql.pb.ExplainInfo
	7,  // 12: scql.pb.TableSchema.columns:type_name -> scql.pb.ColumnDesc
	0,  // 13: scql.pb.OptimizerHints.psi_algorithm_type:type_name -> scql.pb.PsiAlgorithmType
	18, // 14: scql.pb.CompileOptions.spu_conf:type_name -> spu.RuntimeConfig
	10, // 15: scql.pb.CompileOptions.security_compromise:type_name -> scql.pb.SecurityCompromiseConfig
	8,  // 16: scql.pb.CompileOptions.optimizer_hints:type_name -> scql.pb.OptimizerHints
	12, // 17: scql.pb.Catalog.tables:type_name -> scql.pb.TableEntry
	14, // 18: scql.pb.TableEntry.columns:type_name -> scql.pb.TableEntry.Column
	15, // 19: scql.pb.TableEntry.owner:type_name -> scql.pb.PartyId
	19, // 20: scql.pb.CompiledPlan.SubGraphsEntry.value:type_name -> scql.pb.SubGraph
	1,  // 21: scql.pb.InterpreterService.CompileQuery:input_type -> scql.pb.CompileQueryRequest
	2,  // 22: scql.pb.InterpreterService.CompileQuery:output_type -> scql.pb.CompileQueryResponse
	22, // [22:23] is the sub-list for method output_type
	21, // [21:22] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_api_interpreter_proto_init() }
func file_api_interpreter_proto_init() {
	if File_api_interpreter_proto != nil {
		return
	}
	file_api_status_proto_init()
	file_api_ccl_proto_init()
	file_api_core_proto_init()
	file_api_subgraph_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_interpreter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompiledPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizerHints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityCompromiseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Catalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_interpreter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableEntry_Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_interpreter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_interpreter_proto_goTypes,
		DependencyIndexes: file_api_interpreter_proto_depIdxs,
		EnumInfos:         file_api_interpreter_proto_enumTypes,
		MessageInfos:      file_api_interpreter_proto_msgTypes,
	}.Build()
	File_api_interpreter_proto = out.File
	file_api_interpreter_proto_rawDesc = nil
	file_api_interpreter_proto_goTypes = nil
	file_api_interpreter_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InterpreterServiceClient is the client API for InterpreterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterpreterServiceClient interface {
	CompileQuery(ctx context.Context, in *CompileQueryRequest, opts ...grpc.CallOption) (*CompileQueryResponse, error)
}

type interpreterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterpreterServiceClient(cc grpc.ClientConnInterface) InterpreterServiceClient {
	return &interpreterServiceClient{cc}
}

func (c *interpreterServiceClient) CompileQuery(ctx context.Context, in *CompileQueryRequest, opts ...grpc.CallOption) (*CompileQueryResponse, error) {
	out := new(CompileQueryResponse)
	err := c.cc.Invoke(ctx, "/scql.pb.InterpreterService/CompileQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterpreterServiceServer is the server API for InterpreterService service.
type InterpreterServiceServer interface {
	CompileQuery(context.Context, *CompileQueryRequest) (*CompileQueryResponse, error)
}

// UnimplementedInterpreterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInterpreterServiceServer struct {
}

func (*UnimplementedInterpreterServiceServer) CompileQuery(context.Context, *CompileQueryRequest) (*CompileQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileQuery not implemented")
}

func RegisterInterpreterServiceServer(s *grpc.Server, srv InterpreterServiceServer) {
	s.RegisterService(&_InterpreterService_serviceDesc, srv)
}

func _InterpreterService_CompileQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterpreterServiceServer).CompileQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scql.pb.InterpreterService/CompileQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterpreterServiceServer).CompileQuery(ctx, req.(*CompileQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InterpreterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scql.pb.InterpreterService",
	HandlerType: (*InterpreterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompileQuery",
			Handler:    _InterpreterService_CompileQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/interpreter.proto",
}
