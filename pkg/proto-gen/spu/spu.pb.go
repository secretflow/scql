// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: libspu/spu.proto

package spu

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataType int32

const (
	DataType_DT_INVALID DataType = 0
	DataType_DT_I1      DataType = 1
	DataType_DT_I8      DataType = 2
	DataType_DT_U8      DataType = 3
	DataType_DT_I16     DataType = 4
	DataType_DT_U16     DataType = 5
	DataType_DT_I32     DataType = 6
	DataType_DT_U32     DataType = 7
	DataType_DT_I64     DataType = 8
	DataType_DT_U64     DataType = 9
	DataType_DT_F16     DataType = 10
	DataType_DT_F32     DataType = 11
	DataType_DT_F64     DataType = 12
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "DT_INVALID",
		1:  "DT_I1",
		2:  "DT_I8",
		3:  "DT_U8",
		4:  "DT_I16",
		5:  "DT_U16",
		6:  "DT_I32",
		7:  "DT_U32",
		8:  "DT_I64",
		9:  "DT_U64",
		10: "DT_F16",
		11: "DT_F32",
		12: "DT_F64",
	}
	DataType_value = map[string]int32{
		"DT_INVALID": 0,
		"DT_I1":      1,
		"DT_I8":      2,
		"DT_U8":      3,
		"DT_I16":     4,
		"DT_U16":     5,
		"DT_I32":     6,
		"DT_U32":     7,
		"DT_I64":     8,
		"DT_U64":     9,
		"DT_F16":     10,
		"DT_F32":     11,
		"DT_F64":     12,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{0}
}

type Visibility int32

const (
	Visibility_VIS_INVALID Visibility = 0
	Visibility_VIS_SECRET  Visibility = 1
	Visibility_VIS_PUBLIC  Visibility = 2
	Visibility_VIS_PRIVATE Visibility = 3
)

// Enum value maps for Visibility.
var (
	Visibility_name = map[int32]string{
		0: "VIS_INVALID",
		1: "VIS_SECRET",
		2: "VIS_PUBLIC",
		3: "VIS_PRIVATE",
	}
	Visibility_value = map[string]int32{
		"VIS_INVALID": 0,
		"VIS_SECRET":  1,
		"VIS_PUBLIC":  2,
		"VIS_PRIVATE": 3,
	}
)

func (x Visibility) Enum() *Visibility {
	p := new(Visibility)
	*p = x
	return p
}

func (x Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[1].Descriptor()
}

func (Visibility) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[1]
}

func (x Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Visibility.Descriptor instead.
func (Visibility) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{1}
}

type PtType int32

const (
	PtType_PT_INVALID PtType = 0
	PtType_PT_I8      PtType = 1
	PtType_PT_U8      PtType = 2
	PtType_PT_I16     PtType = 3
	PtType_PT_U16     PtType = 4
	PtType_PT_I32     PtType = 5
	PtType_PT_U32     PtType = 6
	PtType_PT_I64     PtType = 7
	PtType_PT_U64     PtType = 8
	PtType_PT_I128    PtType = 9
	PtType_PT_U128    PtType = 10
	PtType_PT_BOOL    PtType = 11
	PtType_PT_F16     PtType = 30
	PtType_PT_F32     PtType = 31
	PtType_PT_F64     PtType = 32
	PtType_PT_CF32    PtType = 50
	PtType_PT_CF64    PtType = 51
)

// Enum value maps for PtType.
var (
	PtType_name = map[int32]string{
		0:  "PT_INVALID",
		1:  "PT_I8",
		2:  "PT_U8",
		3:  "PT_I16",
		4:  "PT_U16",
		5:  "PT_I32",
		6:  "PT_U32",
		7:  "PT_I64",
		8:  "PT_U64",
		9:  "PT_I128",
		10: "PT_U128",
		11: "PT_BOOL",
		30: "PT_F16",
		31: "PT_F32",
		32: "PT_F64",
		50: "PT_CF32",
		51: "PT_CF64",
	}
	PtType_value = map[string]int32{
		"PT_INVALID": 0,
		"PT_I8":      1,
		"PT_U8":      2,
		"PT_I16":     3,
		"PT_U16":     4,
		"PT_I32":     5,
		"PT_U32":     6,
		"PT_I64":     7,
		"PT_U64":     8,
		"PT_I128":    9,
		"PT_U128":    10,
		"PT_BOOL":    11,
		"PT_F16":     30,
		"PT_F32":     31,
		"PT_F64":     32,
		"PT_CF32":    50,
		"PT_CF64":    51,
	}
)

func (x PtType) Enum() *PtType {
	p := new(PtType)
	*p = x
	return p
}

func (x PtType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PtType) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[2].Descriptor()
}

func (PtType) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[2]
}

func (x PtType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PtType.Descriptor instead.
func (PtType) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{2}
}

type FieldType int32

const (
	FieldType_FT_INVALID FieldType = 0
	FieldType_FM32       FieldType = 1
	FieldType_FM64       FieldType = 2
	FieldType_FM128      FieldType = 3
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0: "FT_INVALID",
		1: "FM32",
		2: "FM64",
		3: "FM128",
	}
	FieldType_value = map[string]int32{
		"FT_INVALID": 0,
		"FM32":       1,
		"FM64":       2,
		"FM128":      3,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[3].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[3]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{3}
}

type ProtocolKind int32

const (
	ProtocolKind_PROT_INVALID ProtocolKind = 0
	ProtocolKind_REF2K        ProtocolKind = 1
	ProtocolKind_SEMI2K       ProtocolKind = 2
	ProtocolKind_ABY3         ProtocolKind = 3
	ProtocolKind_CHEETAH      ProtocolKind = 4
	ProtocolKind_SECURENN     ProtocolKind = 5
)

// Enum value maps for ProtocolKind.
var (
	ProtocolKind_name = map[int32]string{
		0: "PROT_INVALID",
		1: "REF2K",
		2: "SEMI2K",
		3: "ABY3",
		4: "CHEETAH",
		5: "SECURENN",
	}
	ProtocolKind_value = map[string]int32{
		"PROT_INVALID": 0,
		"REF2K":        1,
		"SEMI2K":       2,
		"ABY3":         3,
		"CHEETAH":      4,
		"SECURENN":     5,
	}
)

func (x ProtocolKind) Enum() *ProtocolKind {
	p := new(ProtocolKind)
	*p = x
	return p
}

func (x ProtocolKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolKind) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[4].Descriptor()
}

func (ProtocolKind) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[4]
}

func (x ProtocolKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolKind.Descriptor instead.
func (ProtocolKind) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{4}
}

type SourceIRType int32

const (
	SourceIRType_XLA      SourceIRType = 0
	SourceIRType_MLIR_HLO SourceIRType = 1
)

// Enum value maps for SourceIRType.
var (
	SourceIRType_name = map[int32]string{
		0: "XLA",
		1: "MLIR_HLO",
	}
	SourceIRType_value = map[string]int32{
		"XLA":      0,
		"MLIR_HLO": 1,
	}
)

func (x SourceIRType) Enum() *SourceIRType {
	p := new(SourceIRType)
	*p = x
	return p
}

func (x SourceIRType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceIRType) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[5].Descriptor()
}

func (SourceIRType) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[5]
}

func (x SourceIRType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceIRType.Descriptor instead.
func (SourceIRType) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{5}
}

type XLAPrettyPrintKind int32

const (
	XLAPrettyPrintKind_TEXT XLAPrettyPrintKind = 0
	XLAPrettyPrintKind_DOT  XLAPrettyPrintKind = 1
	XLAPrettyPrintKind_HTML XLAPrettyPrintKind = 2
)

// Enum value maps for XLAPrettyPrintKind.
var (
	XLAPrettyPrintKind_name = map[int32]string{
		0: "TEXT",
		1: "DOT",
		2: "HTML",
	}
	XLAPrettyPrintKind_value = map[string]int32{
		"TEXT": 0,
		"DOT":  1,
		"HTML": 2,
	}
)

func (x XLAPrettyPrintKind) Enum() *XLAPrettyPrintKind {
	p := new(XLAPrettyPrintKind)
	*p = x
	return p
}

func (x XLAPrettyPrintKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XLAPrettyPrintKind) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[6].Descriptor()
}

func (XLAPrettyPrintKind) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[6]
}

func (x XLAPrettyPrintKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XLAPrettyPrintKind.Descriptor instead.
func (XLAPrettyPrintKind) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{6}
}

type RuntimeConfig_ExpMode int32

const (
	RuntimeConfig_EXP_DEFAULT RuntimeConfig_ExpMode = 0
	RuntimeConfig_EXP_PADE    RuntimeConfig_ExpMode = 1
	RuntimeConfig_EXP_TAYLOR  RuntimeConfig_ExpMode = 2
)

// Enum value maps for RuntimeConfig_ExpMode.
var (
	RuntimeConfig_ExpMode_name = map[int32]string{
		0: "EXP_DEFAULT",
		1: "EXP_PADE",
		2: "EXP_TAYLOR",
	}
	RuntimeConfig_ExpMode_value = map[string]int32{
		"EXP_DEFAULT": 0,
		"EXP_PADE":    1,
		"EXP_TAYLOR":  2,
	}
)

func (x RuntimeConfig_ExpMode) Enum() *RuntimeConfig_ExpMode {
	p := new(RuntimeConfig_ExpMode)
	*p = x
	return p
}

func (x RuntimeConfig_ExpMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeConfig_ExpMode) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[7].Descriptor()
}

func (RuntimeConfig_ExpMode) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[7]
}

func (x RuntimeConfig_ExpMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeConfig_ExpMode.Descriptor instead.
func (RuntimeConfig_ExpMode) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{3, 0}
}

type RuntimeConfig_LogMode int32

const (
	RuntimeConfig_LOG_DEFAULT RuntimeConfig_LogMode = 0
	RuntimeConfig_LOG_PADE    RuntimeConfig_LogMode = 1
	RuntimeConfig_LOG_NEWTON  RuntimeConfig_LogMode = 2
)

// Enum value maps for RuntimeConfig_LogMode.
var (
	RuntimeConfig_LogMode_name = map[int32]string{
		0: "LOG_DEFAULT",
		1: "LOG_PADE",
		2: "LOG_NEWTON",
	}
	RuntimeConfig_LogMode_value = map[string]int32{
		"LOG_DEFAULT": 0,
		"LOG_PADE":    1,
		"LOG_NEWTON":  2,
	}
)

func (x RuntimeConfig_LogMode) Enum() *RuntimeConfig_LogMode {
	p := new(RuntimeConfig_LogMode)
	*p = x
	return p
}

func (x RuntimeConfig_LogMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeConfig_LogMode) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[8].Descriptor()
}

func (RuntimeConfig_LogMode) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[8]
}

func (x RuntimeConfig_LogMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeConfig_LogMode.Descriptor instead.
func (RuntimeConfig_LogMode) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{3, 1}
}

type RuntimeConfig_SigmoidMode int32

const (
	RuntimeConfig_SIGMOID_DEFAULT RuntimeConfig_SigmoidMode = 0
	RuntimeConfig_SIGMOID_MM1     RuntimeConfig_SigmoidMode = 1
	RuntimeConfig_SIGMOID_SEG3    RuntimeConfig_SigmoidMode = 2
	RuntimeConfig_SIGMOID_REAL    RuntimeConfig_SigmoidMode = 3
)

// Enum value maps for RuntimeConfig_SigmoidMode.
var (
	RuntimeConfig_SigmoidMode_name = map[int32]string{
		0: "SIGMOID_DEFAULT",
		1: "SIGMOID_MM1",
		2: "SIGMOID_SEG3",
		3: "SIGMOID_REAL",
	}
	RuntimeConfig_SigmoidMode_value = map[string]int32{
		"SIGMOID_DEFAULT": 0,
		"SIGMOID_MM1":     1,
		"SIGMOID_SEG3":    2,
		"SIGMOID_REAL":    3,
	}
)

func (x RuntimeConfig_SigmoidMode) Enum() *RuntimeConfig_SigmoidMode {
	p := new(RuntimeConfig_SigmoidMode)
	*p = x
	return p
}

func (x RuntimeConfig_SigmoidMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeConfig_SigmoidMode) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[9].Descriptor()
}

func (RuntimeConfig_SigmoidMode) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[9]
}

func (x RuntimeConfig_SigmoidMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeConfig_SigmoidMode.Descriptor instead.
func (RuntimeConfig_SigmoidMode) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{3, 2}
}

type RuntimeConfig_BeaverType int32

const (
	RuntimeConfig_TrustedFirstParty RuntimeConfig_BeaverType = 0
	RuntimeConfig_TrustedThirdParty RuntimeConfig_BeaverType = 1
	RuntimeConfig_MultiParty        RuntimeConfig_BeaverType = 2
)

// Enum value maps for RuntimeConfig_BeaverType.
var (
	RuntimeConfig_BeaverType_name = map[int32]string{
		0: "TrustedFirstParty",
		1: "TrustedThirdParty",
		2: "MultiParty",
	}
	RuntimeConfig_BeaverType_value = map[string]int32{
		"TrustedFirstParty": 0,
		"TrustedThirdParty": 1,
		"MultiParty":        2,
	}
)

func (x RuntimeConfig_BeaverType) Enum() *RuntimeConfig_BeaverType {
	p := new(RuntimeConfig_BeaverType)
	*p = x
	return p
}

func (x RuntimeConfig_BeaverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeConfig_BeaverType) Descriptor() protoreflect.EnumDescriptor {
	return file_libspu_spu_proto_enumTypes[10].Descriptor()
}

func (RuntimeConfig_BeaverType) Type() protoreflect.EnumType {
	return &file_libspu_spu_proto_enumTypes[10]
}

func (x RuntimeConfig_BeaverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeConfig_BeaverType.Descriptor instead.
func (RuntimeConfig_BeaverType) EnumDescriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{3, 3}
}

type ShapeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dims []int64 `protobuf:"varint,1,rep,packed,name=dims,proto3" json:"dims,omitempty"`
}

func (x *ShapeProto) Reset() {
	*x = ShapeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libspu_spu_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeProto) ProtoMessage() {}

func (x *ShapeProto) ProtoReflect() protoreflect.Message {
	mi := &file_libspu_spu_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeProto.ProtoReflect.Descriptor instead.
func (*ShapeProto) Descriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{0}
}

func (x *ShapeProto) GetDims() []int64 {
	if x != nil {
		return x.Dims
	}
	return nil
}

type ValueMetaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType    DataType    `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=spu.DataType" json:"data_type,omitempty"`
	IsComplex   bool        `protobuf:"varint,2,opt,name=is_complex,json=isComplex,proto3" json:"is_complex,omitempty"`
	Visibility  Visibility  `protobuf:"varint,3,opt,name=visibility,proto3,enum=spu.Visibility" json:"visibility,omitempty"`
	Shape       *ShapeProto `protobuf:"bytes,4,opt,name=shape,proto3" json:"shape,omitempty"`
	StorageType string      `protobuf:"bytes,5,opt,name=storage_type,json=storageType,proto3" json:"storage_type,omitempty"`
}

func (x *ValueMetaProto) Reset() {
	*x = ValueMetaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libspu_spu_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueMetaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueMetaProto) ProtoMessage() {}

func (x *ValueMetaProto) ProtoReflect() protoreflect.Message {
	mi := &file_libspu_spu_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueMetaProto.ProtoReflect.Descriptor instead.
func (*ValueMetaProto) Descriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{1}
}

func (x *ValueMetaProto) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DT_INVALID
}

func (x *ValueMetaProto) GetIsComplex() bool {
	if x != nil {
		return x.IsComplex
	}
	return false
}

func (x *ValueMetaProto) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_VIS_INVALID
}

func (x *ValueMetaProto) GetShape() *ShapeProto {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ValueMetaProto) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

type ValueChunkProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBytes  uint64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	ChunkOffset uint64 `protobuf:"varint,2,opt,name=chunk_offset,json=chunkOffset,proto3" json:"chunk_offset,omitempty"`
	Content     []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ValueChunkProto) Reset() {
	*x = ValueChunkProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libspu_spu_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueChunkProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueChunkProto) ProtoMessage() {}

func (x *ValueChunkProto) ProtoReflect() protoreflect.Message {
	mi := &file_libspu_spu_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueChunkProto.ProtoReflect.Descriptor instead.
func (*ValueChunkProto) Descriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{2}
}

func (x *ValueChunkProto) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *ValueChunkProto) GetChunkOffset() uint64 {
	if x != nil {
		return x.ChunkOffset
	}
	return 0
}

func (x *ValueChunkProto) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type RuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol                                ProtocolKind              `protobuf:"varint,1,opt,name=protocol,proto3,enum=spu.ProtocolKind" json:"protocol,omitempty"`
	Field                                   FieldType                 `protobuf:"varint,2,opt,name=field,proto3,enum=spu.FieldType" json:"field,omitempty"`
	FxpFractionBits                         int64                     `protobuf:"varint,3,opt,name=fxp_fraction_bits,json=fxpFractionBits,proto3" json:"fxp_fraction_bits,omitempty"`
	EnableActionTrace                       bool                      `protobuf:"varint,10,opt,name=enable_action_trace,json=enableActionTrace,proto3" json:"enable_action_trace,omitempty"`
	EnableTypeChecker                       bool                      `protobuf:"varint,11,opt,name=enable_type_checker,json=enableTypeChecker,proto3" json:"enable_type_checker,omitempty"`
	EnablePphloTrace                        bool                      `protobuf:"varint,12,opt,name=enable_pphlo_trace,json=enablePphloTrace,proto3" json:"enable_pphlo_trace,omitempty"`
	EnableRuntimeSnapshot                   bool                      `protobuf:"varint,13,opt,name=enable_runtime_snapshot,json=enableRuntimeSnapshot,proto3" json:"enable_runtime_snapshot,omitempty"`
	SnapshotDumpDir                         string                    `protobuf:"bytes,14,opt,name=snapshot_dump_dir,json=snapshotDumpDir,proto3" json:"snapshot_dump_dir,omitempty"`
	EnablePphloProfile                      bool                      `protobuf:"varint,15,opt,name=enable_pphlo_profile,json=enablePphloProfile,proto3" json:"enable_pphlo_profile,omitempty"`
	EnableHalProfile                        bool                      `protobuf:"varint,16,opt,name=enable_hal_profile,json=enableHalProfile,proto3" json:"enable_hal_profile,omitempty"`
	PublicRandomSeed                        uint64                    `protobuf:"varint,19,opt,name=public_random_seed,json=publicRandomSeed,proto3" json:"public_random_seed,omitempty"`
	ShareMaxChunkSize                       uint64                    `protobuf:"varint,20,opt,name=share_max_chunk_size,json=shareMaxChunkSize,proto3" json:"share_max_chunk_size,omitempty"`
	FxpDivGoldschmidtIters                  int64                     `protobuf:"varint,50,opt,name=fxp_div_goldschmidt_iters,json=fxpDivGoldschmidtIters,proto3" json:"fxp_div_goldschmidt_iters,omitempty"`
	FxpExpMode                              RuntimeConfig_ExpMode     `protobuf:"varint,51,opt,name=fxp_exp_mode,json=fxpExpMode,proto3,enum=spu.RuntimeConfig_ExpMode" json:"fxp_exp_mode,omitempty"`
	FxpExpIters                             int64                     `protobuf:"varint,52,opt,name=fxp_exp_iters,json=fxpExpIters,proto3" json:"fxp_exp_iters,omitempty"`
	FxpLogMode                              RuntimeConfig_LogMode     `protobuf:"varint,53,opt,name=fxp_log_mode,json=fxpLogMode,proto3,enum=spu.RuntimeConfig_LogMode" json:"fxp_log_mode,omitempty"`
	FxpLogIters                             int64                     `protobuf:"varint,54,opt,name=fxp_log_iters,json=fxpLogIters,proto3" json:"fxp_log_iters,omitempty"`
	FxpLogOrders                            int64                     `protobuf:"varint,55,opt,name=fxp_log_orders,json=fxpLogOrders,proto3" json:"fxp_log_orders,omitempty"`
	SigmoidMode                             RuntimeConfig_SigmoidMode `protobuf:"varint,56,opt,name=sigmoid_mode,json=sigmoidMode,proto3,enum=spu.RuntimeConfig_SigmoidMode" json:"sigmoid_mode,omitempty"`
	EnableLowerAccuracyRsqrt                bool                      `protobuf:"varint,57,opt,name=enable_lower_accuracy_rsqrt,json=enableLowerAccuracyRsqrt,proto3" json:"enable_lower_accuracy_rsqrt,omitempty"`
	SineCosineIters                         int64                     `protobuf:"varint,58,opt,name=sine_cosine_iters,json=sineCosineIters,proto3" json:"sine_cosine_iters,omitempty"`
	BeaverType                              RuntimeConfig_BeaverType  `protobuf:"varint,70,opt,name=beaver_type,json=beaverType,proto3,enum=spu.RuntimeConfig_BeaverType" json:"beaver_type,omitempty"`
	TtpBeaverConfig                         *TTPBeaverConfig          `protobuf:"bytes,71,opt,name=ttp_beaver_config,json=ttpBeaverConfig,proto3" json:"ttp_beaver_config,omitempty"`
	TruncAllowMsbError                      bool                      `protobuf:"varint,72,opt,name=trunc_allow_msb_error,json=truncAllowMsbError,proto3" json:"trunc_allow_msb_error,omitempty"`
	ExperimentalDisableMmulSplit            bool                      `protobuf:"varint,100,opt,name=experimental_disable_mmul_split,json=experimentalDisableMmulSplit,proto3" json:"experimental_disable_mmul_split,omitempty"`
	ExperimentalEnableInterOpPar            bool                      `protobuf:"varint,101,opt,name=experimental_enable_inter_op_par,json=experimentalEnableInterOpPar,proto3" json:"experimental_enable_inter_op_par,omitempty"`
	ExperimentalEnableIntraOpPar            bool                      `protobuf:"varint,102,opt,name=experimental_enable_intra_op_par,json=experimentalEnableIntraOpPar,proto3" json:"experimental_enable_intra_op_par,omitempty"`
	ExperimentalDisableVectorization        bool                      `protobuf:"varint,103,opt,name=experimental_disable_vectorization,json=experimentalDisableVectorization,proto3" json:"experimental_disable_vectorization,omitempty"`
	ExperimentalInterOpConcurrency          uint64                    `protobuf:"varint,104,opt,name=experimental_inter_op_concurrency,json=experimentalInterOpConcurrency,proto3" json:"experimental_inter_op_concurrency,omitempty"`
	ExperimentalEnableColocatedOptimization bool                      `protobuf:"varint,105,opt,name=experimental_enable_colocated_optimization,json=experimentalEnableColocatedOptimization,proto3" json:"experimental_enable_colocated_optimization,omitempty"`
}

func (x *RuntimeConfig) Reset() {
	*x = RuntimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libspu_spu_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeConfig) ProtoMessage() {}

func (x *RuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_libspu_spu_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeConfig.ProtoReflect.Descriptor instead.
func (*RuntimeConfig) Descriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{3}
}

func (x *RuntimeConfig) GetProtocol() ProtocolKind {
	if x != nil {
		return x.Protocol
	}
	return ProtocolKind_PROT_INVALID
}

func (x *RuntimeConfig) GetField() FieldType {
	if x != nil {
		return x.Field
	}
	return FieldType_FT_INVALID
}

func (x *RuntimeConfig) GetFxpFractionBits() int64 {
	if x != nil {
		return x.FxpFractionBits
	}
	return 0
}

func (x *RuntimeConfig) GetEnableActionTrace() bool {
	if x != nil {
		return x.EnableActionTrace
	}
	return false
}

func (x *RuntimeConfig) GetEnableTypeChecker() bool {
	if x != nil {
		return x.EnableTypeChecker
	}
	return false
}

func (x *RuntimeConfig) GetEnablePphloTrace() bool {
	if x != nil {
		return x.EnablePphloTrace
	}
	return false
}

func (x *RuntimeConfig) GetEnableRuntimeSnapshot() bool {
	if x != nil {
		return x.EnableRuntimeSnapshot
	}
	return false
}

func (x *RuntimeConfig) GetSnapshotDumpDir() string {
	if x != nil {
		return x.SnapshotDumpDir
	}
	return ""
}

func (x *RuntimeConfig) GetEnablePphloProfile() bool {
	if x != nil {
		return x.EnablePphloProfile
	}
	return false
}

func (x *RuntimeConfig) GetEnableHalProfile() bool {
	if x != nil {
		return x.EnableHalProfile
	}
	return false
}

func (x *RuntimeConfig) GetPublicRandomSeed() uint64 {
	if x != nil {
		return x.PublicRandomSeed
	}
	return 0
}

func (x *RuntimeConfig) GetShareMaxChunkSize() uint64 {
	if x != nil {
		return x.ShareMaxChunkSize
	}
	return 0
}

func (x *RuntimeConfig) GetFxpDivGoldschmidtIters() int64 {
	if x != nil {
		return x.FxpDivGoldschmidtIters
	}
	return 0
}

func (x *RuntimeConfig) GetFxpExpMode() RuntimeConfig_ExpMode {
	if x != nil {
		return x.FxpExpMode
	}
	return RuntimeConfig_EXP_DEFAULT
}

func (x *RuntimeConfig) GetFxpExpIters() int64 {
	if x != nil {
		return x.FxpExpIters
	}
	return 0
}

func (x *RuntimeConfig) GetFxpLogMode() RuntimeConfig_LogMode {
	if x != nil {
		return x.FxpLogMode
	}
	return RuntimeConfig_LOG_DEFAULT
}

func (x *RuntimeConfig) GetFxpLogIters() int64 {
	if x != nil {
		return x.FxpLogIters
	}
	return 0
}

func (x *RuntimeConfig) GetFxpLogOrders() int64 {
	if x != nil {
		return x.FxpLogOrders
	}
	return 0
}

func (x *RuntimeConfig) GetSigmoidMode() RuntimeConfig_SigmoidMode {
	if x != nil {
		return x.SigmoidMode
	}
	return RuntimeConfig_SIGMOID_DEFAULT
}

func (x *RuntimeConfig) GetEnableLowerAccuracyRsqrt() bool {
	if x != nil {
		return x.EnableLowerAccuracyRsqrt
	}
	return false
}

func (x *RuntimeConfig) GetSineCosineIters() int64 {
	if x != nil {
		return x.SineCosineIters
	}
	return 0
}

func (x *RuntimeConfig) GetBeaverType() RuntimeConfig_BeaverType {
	if x != nil {
		return x.BeaverType
	}
	return RuntimeConfig_TrustedFirstParty
}

func (x *RuntimeConfig) GetTtpBeaverConfig() *TTPBeaverConfig {
	if x != nil {
		return x.TtpBeaverConfig
	}
	return nil
}

func (x *RuntimeConfig) GetTruncAllowMsbError() bool {
	if x != nil {
		return x.TruncAllowMsbError
	}
	return false
}

func (x *RuntimeConfig) GetExperimentalDisableMmulSplit() bool {
	if x != nil {
		return x.ExperimentalDisableMmulSplit
	}
	return false
}

func (x *RuntimeConfig) GetExperimentalEnableInterOpPar() bool {
	if x != nil {
		return x.ExperimentalEnableInterOpPar
	}
	return false
}

func (x *RuntimeConfig) GetExperimentalEnableIntraOpPar() bool {
	if x != nil {
		return x.ExperimentalEnableIntraOpPar
	}
	return false
}

func (x *RuntimeConfig) GetExperimentalDisableVectorization() bool {
	if x != nil {
		return x.ExperimentalDisableVectorization
	}
	return false
}

func (x *RuntimeConfig) GetExperimentalInterOpConcurrency() uint64 {
	if x != nil {
		return x.ExperimentalInterOpConcurrency
	}
	return 0
}

func (x *RuntimeConfig) GetExperimentalEnableColocatedOptimization() bool {
	if x != nil {
		return x.ExperimentalEnableColocatedOptimization
	}
	return false
}

type TTPBeaverConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerHost string `protobuf:"bytes,1,opt,name=server_host,json=serverHost,proto3" json:"server_host,omitempty"`
	SessionId  string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AdjustRank int32  `protobuf:"varint,3,opt,name=adjust_rank,json=adjustRank,proto3" json:"adjust_rank,omitempty"`
}

func (x *TTPBeaverConfig) Reset() {
	*x = TTPBeaverConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libspu_spu_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTPBeaverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTPBeaverConfig) ProtoMessage() {}

func (x *TTPBeaverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_libspu_spu_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTPBeaverConfig.ProtoReflect.Descriptor instead.
func (*TTPBeaverConfig) Descriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{4}
}

func (x *TTPBeaverConfig) GetServerHost() string {
	if x != nil {
		return x.ServerHost
	}
	return ""
}

func (x *TTPBeaverConfig) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TTPBeaverConfig) GetAdjustRank() int32 {
	if x != nil {
		return x.AdjustRank
	}
	return 0
}

type CompilationSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IrType          SourceIRType `protobuf:"varint,1,opt,name=ir_type,json=irType,proto3,enum=spu.SourceIRType" json:"ir_type,omitempty"`
	IrTxt           []byte       `protobuf:"bytes,2,opt,name=ir_txt,json=irTxt,proto3" json:"ir_txt,omitempty"`
	InputVisibility []Visibility `protobuf:"varint,3,rep,packed,name=input_visibility,json=inputVisibility,proto3,enum=spu.Visibility" json:"input_visibility,omitempty"`
}

func (x *CompilationSource) Reset() {
	*x = CompilationSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libspu_spu_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompilationSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilationSource) ProtoMessage() {}

func (x *CompilationSource) ProtoReflect() protoreflect.Message {
	mi := &file_libspu_spu_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilationSource.ProtoReflect.Descriptor instead.
func (*CompilationSource) Descriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{5}
}

func (x *CompilationSource) GetIrType() SourceIRType {
	if x != nil {
		return x.IrType
	}
	return SourceIRType_XLA
}

func (x *CompilationSource) GetIrTxt() []byte {
	if x != nil {
		return x.IrTxt
	}
	return nil
}

func (x *CompilationSource) GetInputVisibility() []Visibility {
	if x != nil {
		return x.InputVisibility
	}
	return nil
}

type CompilerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnablePrettyPrint                      bool               `protobuf:"varint,1,opt,name=enable_pretty_print,json=enablePrettyPrint,proto3" json:"enable_pretty_print,omitempty"`
	PrettyPrintDumpDir                     string             `protobuf:"bytes,2,opt,name=pretty_print_dump_dir,json=prettyPrintDumpDir,proto3" json:"pretty_print_dump_dir,omitempty"`
	XlaPpKind                              XLAPrettyPrintKind `protobuf:"varint,3,opt,name=xla_pp_kind,json=xlaPpKind,proto3,enum=spu.XLAPrettyPrintKind" json:"xla_pp_kind,omitempty"`
	DisableSqrtPlusEpsilonRewrite          bool               `protobuf:"varint,10,opt,name=disable_sqrt_plus_epsilon_rewrite,json=disableSqrtPlusEpsilonRewrite,proto3" json:"disable_sqrt_plus_epsilon_rewrite,omitempty"`
	DisableDivSqrtRewrite                  bool               `protobuf:"varint,11,opt,name=disable_div_sqrt_rewrite,json=disableDivSqrtRewrite,proto3" json:"disable_div_sqrt_rewrite,omitempty"`
	DisableReduceTruncationOptimization    bool               `protobuf:"varint,12,opt,name=disable_reduce_truncation_optimization,json=disableReduceTruncationOptimization,proto3" json:"disable_reduce_truncation_optimization,omitempty"`
	DisableMaxpoolingOptimization          bool               `protobuf:"varint,13,opt,name=disable_maxpooling_optimization,json=disableMaxpoolingOptimization,proto3" json:"disable_maxpooling_optimization,omitempty"`
	DisallowMixTypesOpts                   bool               `protobuf:"varint,14,opt,name=disallow_mix_types_opts,json=disallowMixTypesOpts,proto3" json:"disallow_mix_types_opts,omitempty"`
	DisableSelectOptimization              bool               `protobuf:"varint,15,opt,name=disable_select_optimization,json=disableSelectOptimization,proto3" json:"disable_select_optimization,omitempty"`
	EnableOptimizeDenominatorWithBroadcast bool               `protobuf:"varint,16,opt,name=enable_optimize_denominator_with_broadcast,json=enableOptimizeDenominatorWithBroadcast,proto3" json:"enable_optimize_denominator_with_broadcast,omitempty"`
}

func (x *CompilerOptions) Reset() {
	*x = CompilerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libspu_spu_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompilerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilerOptions) ProtoMessage() {}

func (x *CompilerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_libspu_spu_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilerOptions.ProtoReflect.Descriptor instead.
func (*CompilerOptions) Descriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{6}
}

func (x *CompilerOptions) GetEnablePrettyPrint() bool {
	if x != nil {
		return x.EnablePrettyPrint
	}
	return false
}

func (x *CompilerOptions) GetPrettyPrintDumpDir() string {
	if x != nil {
		return x.PrettyPrintDumpDir
	}
	return ""
}

func (x *CompilerOptions) GetXlaPpKind() XLAPrettyPrintKind {
	if x != nil {
		return x.XlaPpKind
	}
	return XLAPrettyPrintKind_TEXT
}

func (x *CompilerOptions) GetDisableSqrtPlusEpsilonRewrite() bool {
	if x != nil {
		return x.DisableSqrtPlusEpsilonRewrite
	}
	return false
}

func (x *CompilerOptions) GetDisableDivSqrtRewrite() bool {
	if x != nil {
		return x.DisableDivSqrtRewrite
	}
	return false
}

func (x *CompilerOptions) GetDisableReduceTruncationOptimization() bool {
	if x != nil {
		return x.DisableReduceTruncationOptimization
	}
	return false
}

func (x *CompilerOptions) GetDisableMaxpoolingOptimization() bool {
	if x != nil {
		return x.DisableMaxpoolingOptimization
	}
	return false
}

func (x *CompilerOptions) GetDisallowMixTypesOpts() bool {
	if x != nil {
		return x.DisallowMixTypesOpts
	}
	return false
}

func (x *CompilerOptions) GetDisableSelectOptimization() bool {
	if x != nil {
		return x.DisableSelectOptimization
	}
	return false
}

func (x *CompilerOptions) GetEnableOptimizeDenominatorWithBroadcast() bool {
	if x != nil {
		return x.EnableOptimizeDenominatorWithBroadcast
	}
	return false
}

type ExecutableProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InputNames  []string `protobuf:"bytes,2,rep,name=input_names,json=inputNames,proto3" json:"input_names,omitempty"`
	OutputNames []string `protobuf:"bytes,4,rep,name=output_names,json=outputNames,proto3" json:"output_names,omitempty"`
	Code        []byte   `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ExecutableProto) Reset() {
	*x = ExecutableProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_libspu_spu_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutableProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutableProto) ProtoMessage() {}

func (x *ExecutableProto) ProtoReflect() protoreflect.Message {
	mi := &file_libspu_spu_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutableProto.ProtoReflect.Descriptor instead.
func (*ExecutableProto) Descriptor() ([]byte, []int) {
	return file_libspu_spu_proto_rawDescGZIP(), []int{7}
}

func (x *ExecutableProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutableProto) GetInputNames() []string {
	if x != nil {
		return x.InputNames
	}
	return nil
}

func (x *ExecutableProto) GetOutputNames() []string {
	if x != nil {
		return x.OutputNames
	}
	return nil
}

func (x *ExecutableProto) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

var File_libspu_spu_proto protoreflect.FileDescriptor

var file_libspu_spu_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6c, 0x69, 0x62, 0x73, 0x70, 0x75, 0x2f, 0x73, 0x70, 0x75, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x73, 0x70, 0x75, 0x22, 0x20, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x2f, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x70,
	0x75, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x6f, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xbb, 0x0f, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x78,
	0x70, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x78, 0x70, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x70, 0x68, 0x6c, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x70, 0x68, 0x6c, 0x6f, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x69, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x70, 0x68, 0x6c, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x70,
	0x68, 0x6c, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x78, 0x70, 0x5f, 0x64,
	0x69, 0x76, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x73, 0x63, 0x68, 0x6d, 0x69, 0x64, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x66, 0x78, 0x70, 0x44,
	0x69, 0x76, 0x47, 0x6f, 0x6c, 0x64, 0x73, 0x63, 0x68, 0x6d, 0x69, 0x64, 0x74, 0x49, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x78, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x66, 0x78, 0x70, 0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x66, 0x78, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x78, 0x70, 0x45, 0x78, 0x70, 0x49,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x78, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x75,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c,
	0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x66, 0x78, 0x70, 0x4c, 0x6f, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x78, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x78, 0x70, 0x4c, 0x6f,
	0x67, 0x49, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x78, 0x70, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x66, 0x78, 0x70, 0x4c, 0x6f, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0c,
	0x73, 0x69, 0x67, 0x6d, 0x6f, 0x69, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x69, 0x67, 0x6d, 0x6f, 0x69, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6d, 0x6f, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x73, 0x71, 0x72, 0x74, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52, 0x73, 0x71, 0x72, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x73, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x65,
	0x61, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x65, 0x61, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x62, 0x65, 0x61, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x74, 0x74,
	0x70, 0x5f, 0x62, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x54, 0x54, 0x50, 0x42,
	0x65, 0x61, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x74, 0x74, 0x70,
	0x42, 0x65, 0x61, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x15,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x73, 0x62, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x73, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x45, 0x0a, 0x1f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6d, 0x75, 0x6c, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6d, 0x75,
	0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x12, 0x46,
	0x0a, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x5f, 0x6f, 0x70, 0x5f, 0x70,
	0x61, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x72,
	0x61, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x12, 0x4c, 0x0a, 0x22, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x5b, 0x0a, 0x2a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x27, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x07,
	0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x50, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x50, 0x5f,
	0x50, 0x41, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x41,
	0x59, 0x4c, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x38, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x41, 0x44, 0x45, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x5f, 0x4e, 0x45, 0x57, 0x54, 0x4f, 0x4e, 0x10, 0x02,
	0x22, 0x57, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6d, 0x6f, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x49, 0x47, 0x4d, 0x4f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x47, 0x4d, 0x4f, 0x49, 0x44, 0x5f,
	0x4d, 0x4d, 0x31, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x47, 0x4d, 0x4f, 0x49, 0x44,
	0x5f, 0x53, 0x45, 0x47, 0x33, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x47, 0x4d, 0x4f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x4a, 0x0a, 0x0a, 0x42, 0x65, 0x61,
	0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x12, 0x10,
	0x13, 0x22, 0x72, 0x0a, 0x0f, 0x54, 0x54, 0x50, 0x42, 0x65, 0x61, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x69,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73,
	0x70, 0x75, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x52, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x69, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x72, 0x5f, 0x74, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x72, 0x54, 0x78, 0x74, 0x12, 0x3a,
	0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xa0, 0x05, 0x0a, 0x0f, 0x43,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x64,
	0x75, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x69,
	0x72, 0x12, 0x37, 0x0a, 0x0b, 0x78, 0x6c, 0x61, 0x5f, 0x70, 0x70, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x75, 0x2e, 0x58, 0x4c, 0x41,
	0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x09, 0x78, 0x6c, 0x61, 0x50, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x71, 0x72, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x71,
	0x72, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x45, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x52, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x69, 0x76, 0x5f, 0x73, 0x71, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x76, 0x53, 0x71, 0x72, 0x74, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x53, 0x0a,
	0x26, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x78, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x70, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5a, 0x0a, 0x2a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x7d, 0x0a,
	0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0xa7, 0x01, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x54, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x54, 0x5f,
	0x49, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x54, 0x5f, 0x49, 0x38, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x54, 0x5f, 0x55, 0x38, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x54,
	0x5f, 0x49, 0x31, 0x36, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x54, 0x5f, 0x55, 0x31, 0x36,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x54, 0x5f, 0x49, 0x33, 0x32, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x54, 0x5f, 0x55, 0x33, 0x32, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x54,
	0x5f, 0x49, 0x36, 0x34, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x54, 0x5f, 0x55, 0x36, 0x34,
	0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x54, 0x5f, 0x46, 0x31, 0x36, 0x10, 0x0a, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x54, 0x5f, 0x46, 0x33, 0x32, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x54,
	0x5f, 0x46, 0x36, 0x34, 0x10, 0x0c, 0x2a, 0x4e, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x43,
	0x52, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x53, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x53, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0xdb, 0x01, 0x0a, 0x06, 0x50, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x54, 0x5f, 0x49, 0x38, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x54, 0x5f, 0x55, 0x38, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x49, 0x31,
	0x36, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x55, 0x31, 0x36, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x49, 0x33, 0x32, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x54, 0x5f, 0x55, 0x33, 0x32, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x49, 0x36,
	0x34, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x55, 0x36, 0x34, 0x10, 0x08, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f, 0x49, 0x31, 0x32, 0x38, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x54, 0x5f, 0x55, 0x31, 0x32, 0x38, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f,
	0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x46, 0x31, 0x36,
	0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x46, 0x33, 0x32, 0x10, 0x1f, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x54, 0x5f, 0x46, 0x36, 0x34, 0x10, 0x20, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54,
	0x5f, 0x43, 0x46, 0x33, 0x32, 0x10, 0x32, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f, 0x43, 0x46,
	0x36, 0x34, 0x10, 0x33, 0x2a, 0x3a, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4d, 0x33, 0x32, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x4d, 0x36, 0x34, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4d, 0x31, 0x32, 0x38, 0x10, 0x03,
	0x2a, 0x5c, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x46, 0x32, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x45, 0x4d, 0x49, 0x32, 0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x42, 0x59,
	0x33, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x45, 0x45, 0x54, 0x41, 0x48, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x4e, 0x4e, 0x10, 0x05, 0x2a, 0x25,
	0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x52, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x58, 0x4c, 0x41, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4c, 0x49, 0x52, 0x5f,
	0x48, 0x4c, 0x4f, 0x10, 0x01, 0x2a, 0x31, 0x0a, 0x12, 0x58, 0x4c, 0x41, 0x50, 0x72, 0x65, 0x74,
	0x74, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_libspu_spu_proto_rawDescOnce sync.Once
	file_libspu_spu_proto_rawDescData = file_libspu_spu_proto_rawDesc
)

func file_libspu_spu_proto_rawDescGZIP() []byte {
	file_libspu_spu_proto_rawDescOnce.Do(func() {
		file_libspu_spu_proto_rawDescData = protoimpl.X.CompressGZIP(file_libspu_spu_proto_rawDescData)
	})
	return file_libspu_spu_proto_rawDescData
}

var file_libspu_spu_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_libspu_spu_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_libspu_spu_proto_goTypes = []interface{}{
	(DataType)(0),                  // 0: spu.DataType
	(Visibility)(0),                // 1: spu.Visibility
	(PtType)(0),                    // 2: spu.PtType
	(FieldType)(0),                 // 3: spu.FieldType
	(ProtocolKind)(0),              // 4: spu.ProtocolKind
	(SourceIRType)(0),              // 5: spu.SourceIRType
	(XLAPrettyPrintKind)(0),        // 6: spu.XLAPrettyPrintKind
	(RuntimeConfig_ExpMode)(0),     // 7: spu.RuntimeConfig.ExpMode
	(RuntimeConfig_LogMode)(0),     // 8: spu.RuntimeConfig.LogMode
	(RuntimeConfig_SigmoidMode)(0), // 9: spu.RuntimeConfig.SigmoidMode
	(RuntimeConfig_BeaverType)(0),  // 10: spu.RuntimeConfig.BeaverType
	(*ShapeProto)(nil),             // 11: spu.ShapeProto
	(*ValueMetaProto)(nil),         // 12: spu.ValueMetaProto
	(*ValueChunkProto)(nil),        // 13: spu.ValueChunkProto
	(*RuntimeConfig)(nil),          // 14: spu.RuntimeConfig
	(*TTPBeaverConfig)(nil),        // 15: spu.TTPBeaverConfig
	(*CompilationSource)(nil),      // 16: spu.CompilationSource
	(*CompilerOptions)(nil),        // 17: spu.CompilerOptions
	(*ExecutableProto)(nil),        // 18: spu.ExecutableProto
}
var file_libspu_spu_proto_depIdxs = []int32{
	0,  // 0: spu.ValueMetaProto.data_type:type_name -> spu.DataType
	1,  // 1: spu.ValueMetaProto.visibility:type_name -> spu.Visibility
	11, // 2: spu.ValueMetaProto.shape:type_name -> spu.ShapeProto
	4,  // 3: spu.RuntimeConfig.protocol:type_name -> spu.ProtocolKind
	3,  // 4: spu.RuntimeConfig.field:type_name -> spu.FieldType
	7,  // 5: spu.RuntimeConfig.fxp_exp_mode:type_name -> spu.RuntimeConfig.ExpMode
	8,  // 6: spu.RuntimeConfig.fxp_log_mode:type_name -> spu.RuntimeConfig.LogMode
	9,  // 7: spu.RuntimeConfig.sigmoid_mode:type_name -> spu.RuntimeConfig.SigmoidMode
	10, // 8: spu.RuntimeConfig.beaver_type:type_name -> spu.RuntimeConfig.BeaverType
	15, // 9: spu.RuntimeConfig.ttp_beaver_config:type_name -> spu.TTPBeaverConfig
	5,  // 10: spu.CompilationSource.ir_type:type_name -> spu.SourceIRType
	1,  // 11: spu.CompilationSource.input_visibility:type_name -> spu.Visibility
	6,  // 12: spu.CompilerOptions.xla_pp_kind:type_name -> spu.XLAPrettyPrintKind
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_libspu_spu_proto_init() }
func file_libspu_spu_proto_init() {
	if File_libspu_spu_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_libspu_spu_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libspu_spu_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueMetaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libspu_spu_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueChunkProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libspu_spu_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libspu_spu_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTPBeaverConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libspu_spu_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompilationSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libspu_spu_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompilerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_libspu_spu_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutableProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_libspu_spu_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_libspu_spu_proto_goTypes,
		DependencyIndexes: file_libspu_spu_proto_depIdxs,
		EnumInfos:         file_libspu_spu_proto_enumTypes,
		MessageInfos:      file_libspu_spu_proto_msgTypes,
	}.Build()
	File_libspu_spu_proto = out.File
	file_libspu_spu_proto_rawDesc = nil
	file_libspu_spu_proto_goTypes = nil
	file_libspu_spu_proto_depIdxs = nil
}
