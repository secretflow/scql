// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: pkg/audit/audit.proto

package audit

import (
	scql "github.com/secretflow/scql/pkg/proto-gen/scql"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryType int32

const (
	QueryType_UNKNOWN         QueryType = 0
	QueryType_DQL             QueryType = 1
	QueryType_GRANT_PRIV      QueryType = 2
	QueryType_REVOKE_PRIV     QueryType = 3
	QueryType_SHOW_STMT       QueryType = 4
	QueryType_CREATE_USER     QueryType = 5
	QueryType_DROP_USER       QueryType = 6
	QueryType_ALTER_USER      QueryType = 7
	QueryType_CREATE_DATABASE QueryType = 8
	QueryType_DROP_DATABASE   QueryType = 9
	QueryType_CREATE_TABLE    QueryType = 10
	QueryType_DROP_TABLE      QueryType = 11
	QueryType_CREATE_VIEW     QueryType = 12
	QueryType_EXPLAIN_STMT    QueryType = 13
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "DQL",
		2:  "GRANT_PRIV",
		3:  "REVOKE_PRIV",
		4:  "SHOW_STMT",
		5:  "CREATE_USER",
		6:  "DROP_USER",
		7:  "ALTER_USER",
		8:  "CREATE_DATABASE",
		9:  "DROP_DATABASE",
		10: "CREATE_TABLE",
		11: "DROP_TABLE",
		12: "CREATE_VIEW",
		13: "EXPLAIN_STMT",
	}
	QueryType_value = map[string]int32{
		"UNKNOWN":         0,
		"DQL":             1,
		"GRANT_PRIV":      2,
		"REVOKE_PRIV":     3,
		"SHOW_STMT":       4,
		"CREATE_USER":     5,
		"DROP_USER":       6,
		"ALTER_USER":      7,
		"CREATE_DATABASE": 8,
		"DROP_DATABASE":   9,
		"CREATE_TABLE":    10,
		"DROP_TABLE":      11,
		"CREATE_VIEW":     12,
		"EXPLAIN_STMT":    13,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_audit_audit_proto_enumTypes[0].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_pkg_audit_audit_proto_enumTypes[0]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_audit_audit_proto_rawDescGZIP(), []int{0}
}

type AuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *AuditHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Body   *AuditBody   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_audit_audit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_audit_audit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog.ProtoReflect.Descriptor instead.
func (*AuditLog) Descriptor() ([]byte, []int) {
	return file_pkg_audit_audit_proto_rawDescGZIP(), []int{0}
}

func (x *AuditLog) GetHeader() *AuditHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AuditLog) GetBody() *AuditBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type AuditBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*AuditBody_Uncategorized
	//	*AuditBody_RunSyncQuery
	//	*AuditBody_RunAsyncQuery
	//	*AuditBody_AsyncComplete
	//	*AuditBody_FetchResult
	//	*AuditBody_SessionParams
	//	*AuditBody_PlanDetail
	//	*AuditBody_DagDetail
	//	*AuditBody_CclDetail
	Body isAuditBody_Body `protobuf_oneof:"body"`
}

func (x *AuditBody) Reset() {
	*x = AuditBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_audit_audit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditBody) ProtoMessage() {}

func (x *AuditBody) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_audit_audit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditBody.ProtoReflect.Descriptor instead.
func (*AuditBody) Descriptor() ([]byte, []int) {
	return file_pkg_audit_audit_proto_rawDescGZIP(), []int{1}
}

func (m *AuditBody) GetBody() isAuditBody_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *AuditBody) GetUncategorized() *UncategorizedEvent {
	if x, ok := x.GetBody().(*AuditBody_Uncategorized); ok {
		return x.Uncategorized
	}
	return nil
}

func (x *AuditBody) GetRunSyncQuery() *RunSyncQueryEvent {
	if x, ok := x.GetBody().(*AuditBody_RunSyncQuery); ok {
		return x.RunSyncQuery
	}
	return nil
}

func (x *AuditBody) GetRunAsyncQuery() *RunAsyncQueryEvent {
	if x, ok := x.GetBody().(*AuditBody_RunAsyncQuery); ok {
		return x.RunAsyncQuery
	}
	return nil
}

func (x *AuditBody) GetAsyncComplete() *AsyncCompleteEvent {
	if x, ok := x.GetBody().(*AuditBody_AsyncComplete); ok {
		return x.AsyncComplete
	}
	return nil
}

func (x *AuditBody) GetFetchResult() *FetchResultEvent {
	if x, ok := x.GetBody().(*AuditBody_FetchResult); ok {
		return x.FetchResult
	}
	return nil
}

func (x *AuditBody) GetSessionParams() *SessionParameters {
	if x, ok := x.GetBody().(*AuditBody_SessionParams); ok {
		return x.SessionParams
	}
	return nil
}

func (x *AuditBody) GetPlanDetail() *QueryPlanDetail {
	if x, ok := x.GetBody().(*AuditBody_PlanDetail); ok {
		return x.PlanDetail
	}
	return nil
}

func (x *AuditBody) GetDagDetail() *QueryDagDetail {
	if x, ok := x.GetBody().(*AuditBody_DagDetail); ok {
		return x.DagDetail
	}
	return nil
}

func (x *AuditBody) GetCclDetail() *scql.SecurityConfig {
	if x, ok := x.GetBody().(*AuditBody_CclDetail); ok {
		return x.CclDetail
	}
	return nil
}

type isAuditBody_Body interface {
	isAuditBody_Body()
}

type AuditBody_Uncategorized struct {
	Uncategorized *UncategorizedEvent `protobuf:"bytes,1,opt,name=uncategorized,proto3,oneof"`
}

type AuditBody_RunSyncQuery struct {
	RunSyncQuery *RunSyncQueryEvent `protobuf:"bytes,2,opt,name=run_sync_query,json=runSyncQuery,proto3,oneof"`
}

type AuditBody_RunAsyncQuery struct {
	RunAsyncQuery *RunAsyncQueryEvent `protobuf:"bytes,3,opt,name=run_async_query,json=runAsyncQuery,proto3,oneof"`
}

type AuditBody_AsyncComplete struct {
	AsyncComplete *AsyncCompleteEvent `protobuf:"bytes,4,opt,name=async_complete,json=asyncComplete,proto3,oneof"`
}

type AuditBody_FetchResult struct {
	FetchResult *FetchResultEvent `protobuf:"bytes,5,opt,name=fetch_result,json=fetchResult,proto3,oneof"`
}

type AuditBody_SessionParams struct {
	SessionParams *SessionParameters `protobuf:"bytes,6,opt,name=session_params,json=sessionParams,proto3,oneof"`
}

type AuditBody_PlanDetail struct {
	PlanDetail *QueryPlanDetail `protobuf:"bytes,7,opt,name=plan_detail,json=planDetail,proto3,oneof"`
}

type AuditBody_DagDetail struct {
	DagDetail *QueryDagDetail `protobuf:"bytes,8,opt,name=dag_detail,json=dagDetail,proto3,oneof"`
}

type AuditBody_CclDetail struct {
	CclDetail *scql.SecurityConfig `protobuf:"bytes,9,opt,name=ccl_detail,json=cclDetail,proto3,oneof"`
}

func (*AuditBody_Uncategorized) isAuditBody_Body() {}

func (*AuditBody_RunSyncQuery) isAuditBody_Body() {}

func (*AuditBody_RunAsyncQuery) isAuditBody_Body() {}

func (*AuditBody_AsyncComplete) isAuditBody_Body() {}

func (*AuditBody_FetchResult) isAuditBody_Body() {}

func (*AuditBody_SessionParams) isAuditBody_Body() {}

func (*AuditBody_PlanDetail) isAuditBody_Body() {}

func (*AuditBody_DagDetail) isAuditBody_Body() {}

func (*AuditBody_CclDetail) isAuditBody_Body() {}

type RunSyncQueryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName     string    `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	HostName     string    `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	SourceIp     string    `protobuf:"bytes,3,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	Query        string    `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Type         QueryType `protobuf:"varint,5,opt,name=type,proto3,enum=audit.pb.QueryType" json:"type,omitempty"`
	NumRows      int64     `protobuf:"varint,6,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	AffectedRows int64     `protobuf:"varint,7,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
	CostTime     int64     `protobuf:"varint,8,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
}

func (x *RunSyncQueryEvent) Reset() {
	*x = RunSyncQueryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_audit_audit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSyncQueryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSyncQueryEvent) ProtoMessage() {}

func (x *RunSyncQueryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_audit_audit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSyncQueryEvent.ProtoReflect.Descriptor instead.
func (*RunSyncQueryEvent) Descriptor() ([]byte, []int) {
	return file_pkg_audit_audit_proto_rawDescGZIP(), []int{2}
}

func (x *RunSyncQueryEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RunSyncQueryEvent) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *RunSyncQueryEvent) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *RunSyncQueryEvent) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RunSyncQueryEvent) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_UNKNOWN
}

func (x *RunSyncQueryEvent) GetNumRows() int64 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

func (x *RunSyncQueryEvent) GetAffectedRows() int64 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

func (x *RunSyncQueryEvent) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type RunAsyncQueryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string    `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	HostName string    `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	SourceIp string    `protobuf:"bytes,3,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	Query    string    `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Type     QueryType `protobuf:"varint,5,opt,name=type,proto3,enum=audit.pb.QueryType" json:"type,omitempty"`
	CostTime int64     `protobuf:"varint,6,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"`
}

func (x *RunAsyncQueryEvent) Reset() {
	*x = RunAsyncQueryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_audit_audit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunAsyncQueryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunAsyncQueryEvent) ProtoMessage() {}

func (x *RunAsyncQueryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_audit_audit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunAsyncQueryEvent.ProtoReflect.Descriptor instead.
func (*RunAsyncQueryEvent) Descriptor() ([]byte, []int) {
	return file_pkg_audit_audit_proto_rawDescGZIP(), []int{3}
}

func (x *RunAsyncQueryEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RunAsyncQueryEvent) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *RunAsyncQueryEvent) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *RunAsyncQueryEvent) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RunAsyncQueryEvent) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_UNKNOWN
}

func (x *RunAsyncQueryEvent) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type QueryPlanDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyCode string      `protobuf:"bytes,1,opt,name=party_code,json=partyCode,proto3" json:"party_code,omitempty"`
	TargetUrl string      `protobuf:"bytes,2,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
	NodeList  []*NodeInfo `protobuf:"bytes,3,rep,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
}

func (x *QueryPlanDetail) Reset() {
	*x = QueryPlanDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_audit_audit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPlanDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPlanDetail) ProtoMessage() {}

func (x *QueryPlanDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_audit_audit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPlanDetail.ProtoReflect.Descriptor instead.
func (*QueryPlanDetail) Descriptor() ([]byte, []int) {
	return file_pkg_audit_audit_proto_rawDescGZIP(), []int{4}
}

func (x *QueryPlanDetail) GetPartyCode() string {
	if x != nil {
		return x.PartyCode
	}
	return ""
}

func (x *QueryPlanDetail) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

func (x *QueryPlanDetail) GetNodeList() []*NodeInfo {
	if x != nil {
		return x.NodeList
	}
	return nil
}

type QueryDagDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyCode string      `protobuf:"bytes,1,opt,name=party_code,json=partyCode,proto3" json:"party_code,omitempty"`
	TargetUrl string      `protobuf:"bytes,2,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
	DagId     int32       `protobuf:"varint,3,opt,name=dag_id,json=dagId,proto3" json:"dag_id,omitempty"`
	NodeList  []*NodeInfo `protobuf:"bytes,4,rep,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
}

func (x *QueryDagDetail) Reset() {
	*x = QueryDagDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_audit_audit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDagDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDagDetail) ProtoMessage() {}

func (x *QueryDagDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_audit_audit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDagDetail.ProtoReflect.Descriptor instead.
func (*QueryDagDetail) Descriptor() ([]byte, []int) {
	return file_pkg_audit_audit_proto_rawDescGZIP(), []int{5}
}

func (x *QueryDagDetail) GetPartyCode() string {
	if x != nil {
		return x.PartyCode
	}
	return ""
}

func (x *QueryDagDetail) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

func (x *QueryDagDetail) GetDagId() int32 {
	if x != nil {
		return x.DagId
	}
	return 0
}

func (x *QueryDagDetail) GetNodeList() []*NodeInfo {
	if x != nil {
		return x.NodeList
	}
	return nil
}

type SessionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sync       bool                     `protobuf:"varint,1,opt,name=sync,proto3" json:"sync,omitempty"`
	Parameters *scql.SessionStartParams `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *SessionParameters) Reset() {
	*x = SessionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_audit_audit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionParameters) ProtoMessage() {}

func (x *SessionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_audit_audit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionParameters.ProtoReflect.Descriptor instead.
func (*SessionParameters) Descriptor() ([]byte, []int) {
	return file_pkg_audit_audit_proto_rawDescGZIP(), []int{6}
}

func (x *SessionParameters) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

func (x *SessionParameters) GetParameters() *scql.SessionStartParams {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type AsyncCompleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRows      int64 `protobuf:"varint,1,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	AffectedRows int64 `protobuf:"varint,2,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
}

func (x *AsyncCompleteEvent) Reset() {
	*x = AsyncCompleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_audit_audit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncCompleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncCompleteEvent) ProtoMessage() {}

func (x *AsyncCompleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_audit_audit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncCompleteEvent.ProtoReflect.Descriptor instead.
func (*AsyncCompleteEvent) Descriptor() ([]byte, []int) {
	return file_pkg_audit_audit_proto_rawDescGZIP(), []int{7}
}

func (x *AsyncCompleteEvent) GetNumRows() int64 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

func (x *AsyncCompleteEvent) GetAffectedRows() int64 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

type FetchResultEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName     string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	HostName     string `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	SourceIp     string `protobuf:"bytes,3,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	NumRows      int64  `protobuf:"varint,4,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	AffectedRows int64  `protobuf:"varint,5,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
}

func (x *FetchResultEvent) Reset() {
	*x = FetchResultEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_audit_audit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchResultEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchResultEvent) ProtoMessage() {}

func (x *FetchResultEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_audit_audit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchResultEvent.ProtoReflect.Descriptor instead.
func (*FetchResultEvent) Descriptor() ([]byte, []int) {
	return file_pkg_audit_audit_proto_rawDescGZIP(), []int{8}
}

func (x *FetchResultEvent) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *FetchResultEvent) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *FetchResultEvent) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *FetchResultEvent) GetNumRows() int64 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

func (x *FetchResultEvent) GetAffectedRows() int64 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

var File_pkg_audit_audit_proto protoreflect.FileDescriptor

var file_pkg_audit_audit_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70,
	0x62, 0x1a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x08, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xe7,
	0x04, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x44, 0x0a, 0x0d,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x53, 0x79,
	0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x5f, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6e, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x72, 0x75, 0x6e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x45, 0x0a, 0x0e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3c, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x64,
	0x61, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x63, 0x6c, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x71,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x63, 0x63, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x86, 0x02, 0x0a, 0x11, 0x52, 0x75, 0x6e,
	0x53, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xc7, 0x01, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x96,
	0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x61, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x54, 0x0a,
	0x12, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x77, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x2a,
	0xee, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x51,
	0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x4d,
	0x54, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0a, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0c, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x10, 0x0d,
	0x42, 0x11, 0x5a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_audit_audit_proto_rawDescOnce sync.Once
	file_pkg_audit_audit_proto_rawDescData = file_pkg_audit_audit_proto_rawDesc
)

func file_pkg_audit_audit_proto_rawDescGZIP() []byte {
	file_pkg_audit_audit_proto_rawDescOnce.Do(func() {
		file_pkg_audit_audit_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_audit_audit_proto_rawDescData)
	})
	return file_pkg_audit_audit_proto_rawDescData
}

var file_pkg_audit_audit_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_audit_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pkg_audit_audit_proto_goTypes = []interface{}{
	(QueryType)(0),                  // 0: audit.pb.QueryType
	(*AuditLog)(nil),                // 1: audit.pb.AuditLog
	(*AuditBody)(nil),               // 2: audit.pb.AuditBody
	(*RunSyncQueryEvent)(nil),       // 3: audit.pb.RunSyncQueryEvent
	(*RunAsyncQueryEvent)(nil),      // 4: audit.pb.RunAsyncQueryEvent
	(*QueryPlanDetail)(nil),         // 5: audit.pb.QueryPlanDetail
	(*QueryDagDetail)(nil),          // 6: audit.pb.QueryDagDetail
	(*SessionParameters)(nil),       // 7: audit.pb.SessionParameters
	(*AsyncCompleteEvent)(nil),      // 8: audit.pb.AsyncCompleteEvent
	(*FetchResultEvent)(nil),        // 9: audit.pb.FetchResultEvent
	(*AuditHeader)(nil),             // 10: audit.pb.AuditHeader
	(*UncategorizedEvent)(nil),      // 11: audit.pb.UncategorizedEvent
	(*scql.SecurityConfig)(nil),     // 12: scql.pb.SecurityConfig
	(*NodeInfo)(nil),                // 13: audit.pb.NodeInfo
	(*scql.SessionStartParams)(nil), // 14: scql.pb.SessionStartParams
}
var file_pkg_audit_audit_proto_depIdxs = []int32{
	10, // 0: audit.pb.AuditLog.header:type_name -> audit.pb.AuditHeader
	2,  // 1: audit.pb.AuditLog.body:type_name -> audit.pb.AuditBody
	11, // 2: audit.pb.AuditBody.uncategorized:type_name -> audit.pb.UncategorizedEvent
	3,  // 3: audit.pb.AuditBody.run_sync_query:type_name -> audit.pb.RunSyncQueryEvent
	4,  // 4: audit.pb.AuditBody.run_async_query:type_name -> audit.pb.RunAsyncQueryEvent
	8,  // 5: audit.pb.AuditBody.async_complete:type_name -> audit.pb.AsyncCompleteEvent
	9,  // 6: audit.pb.AuditBody.fetch_result:type_name -> audit.pb.FetchResultEvent
	7,  // 7: audit.pb.AuditBody.session_params:type_name -> audit.pb.SessionParameters
	5,  // 8: audit.pb.AuditBody.plan_detail:type_name -> audit.pb.QueryPlanDetail
	6,  // 9: audit.pb.AuditBody.dag_detail:type_name -> audit.pb.QueryDagDetail
	12, // 10: audit.pb.AuditBody.ccl_detail:type_name -> scql.pb.SecurityConfig
	0,  // 11: audit.pb.RunSyncQueryEvent.type:type_name -> audit.pb.QueryType
	0,  // 12: audit.pb.RunAsyncQueryEvent.type:type_name -> audit.pb.QueryType
	13, // 13: audit.pb.QueryPlanDetail.node_list:type_name -> audit.pb.NodeInfo
	13, // 14: audit.pb.QueryDagDetail.node_list:type_name -> audit.pb.NodeInfo
	14, // 15: audit.pb.SessionParameters.parameters:type_name -> scql.pb.SessionStartParams
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pkg_audit_audit_proto_init() }
func file_pkg_audit_audit_proto_init() {
	if File_pkg_audit_audit_proto != nil {
		return
	}
	file_pkg_audit_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pkg_audit_audit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_audit_audit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_audit_audit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSyncQueryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_audit_audit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunAsyncQueryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_audit_audit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPlanDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_audit_audit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDagDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_audit_audit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_audit_audit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncCompleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_audit_audit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchResultEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_audit_audit_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AuditBody_Uncategorized)(nil),
		(*AuditBody_RunSyncQuery)(nil),
		(*AuditBody_RunAsyncQuery)(nil),
		(*AuditBody_AsyncComplete)(nil),
		(*AuditBody_FetchResult)(nil),
		(*AuditBody_SessionParams)(nil),
		(*AuditBody_PlanDetail)(nil),
		(*AuditBody_DagDetail)(nil),
		(*AuditBody_CclDetail)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_audit_audit_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_audit_audit_proto_goTypes,
		DependencyIndexes: file_pkg_audit_audit_proto_depIdxs,
		EnumInfos:         file_pkg_audit_audit_proto_enumTypes,
		MessageInfos:      file_pkg_audit_audit_proto_msgTypes,
	}.Build()
	File_pkg_audit_audit_proto = out.File
	file_pkg_audit_audit_proto_rawDesc = nil
	file_pkg_audit_audit_proto_goTypes = nil
	file_pkg_audit_audit_proto_depIdxs = nil
}
