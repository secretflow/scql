// Code generated by MockGen. DO NOT EDIT.
// Source: engine_stub.go

// Package executor is a generated GoMock package.
package executor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	scql "github.com/secretflow/scql/pkg/proto-gen/scql"
)

// MockEngineClient is a mock of EngineClient interface.
type MockEngineClient struct {
	ctrl     *gomock.Controller
	recorder *MockEngineClientMockRecorder
}

// MockEngineClientMockRecorder is the mock recorder for MockEngineClient.
type MockEngineClientMockRecorder struct {
	mock *MockEngineClient
}

// NewMockEngineClient creates a new mock instance.
func NewMockEngineClient(ctrl *gomock.Controller) *MockEngineClient {
	mock := &MockEngineClient{ctrl: ctrl}
	mock.recorder = &MockEngineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineClient) EXPECT() *MockEngineClientMockRecorder {
	return m.recorder
}

// RunExecutionPlan mocks base method.
func (m *MockEngineClient) RunExecutionPlan(url, credential string, executionPlanReq *scql.RunExecutionPlanRequest) (*scql.RunExecutionPlanResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunExecutionPlan", url, credential, executionPlanReq)
	ret0, _ := ret[0].(*scql.RunExecutionPlanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunExecutionPlan indicates an expected call of RunExecutionPlan.
func (mr *MockEngineClientMockRecorder) RunExecutionPlan(url, credential, executionPlanReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunExecutionPlan", reflect.TypeOf((*MockEngineClient)(nil).RunExecutionPlan), url, credential, executionPlanReq)
}
