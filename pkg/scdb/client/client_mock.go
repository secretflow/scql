// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package client is a generated GoMock package.
package client

import (
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockhttpClientI is a mock of httpClientI interface.
type MockhttpClientI struct {
	ctrl     *gomock.Controller
	recorder *MockhttpClientIMockRecorder
}

// MockhttpClientIMockRecorder is the mock recorder for MockhttpClientI.
type MockhttpClientIMockRecorder struct {
	mock *MockhttpClientI
}

// NewMockhttpClientI creates a new mock instance.
func NewMockhttpClientI(ctrl *gomock.Controller) *MockhttpClientI {
	mock := &MockhttpClientI{ctrl: ctrl}
	mock.recorder = &MockhttpClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpClientI) EXPECT() *MockhttpClientIMockRecorder {
	return m.recorder
}

// Post mocks base method.
func (m *MockhttpClientI) Post(url, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockhttpClientIMockRecorder) Post(url, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockhttpClientI)(nil).Post), url, contentType, body)
}
