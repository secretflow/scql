swagger: "2.0"
info:
  title: api/broker.proto
  version: version not set
tags:
  - name: IntraBrokerService
  - name: InterBrokerService
consumes:
  - application/json
produces:
  - application/json
paths:
  /intra/query:
    post:
      summary: DoQuery
      description: |-
        Run Query synchronously and return query result if the query completes
        within a specified timeout
      operationId: IntraBrokerService_DoQuery
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.QueryResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.QueryRequest'
      tags:
        - IntraBrokerService
  /intra/query/submit:
    post:
      summary: SubmitQuery
      description: Run Query asynchronously
      operationId: IntraBrokerService_SubmitQuery
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.SubmitResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.QueryRequest'
      tags:
        - IntraBrokerService
  /intra/query/fetch:
    post:
      summary: FetchResult
      description: Fetch query result of asynchronous query
      operationId: IntraBrokerService_FetchResult
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.QueryResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.FetchResultRequest'
      tags:
        - IntraBrokerService
  /intra/project/create:
    post:
      summary: CreateProject
      description: |-
        Create a new Project and automatically become the Project member and
        creator
      operationId: IntraBrokerService_CreateProject
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.CreateProjectResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.CreateProjectRequest'
      tags:
        - IntraBrokerService
  /intra/project/list:
    post:
      summary: ListProjects
      description: List All Projects that have created and joined
      operationId: IntraBrokerService_ListProjects
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.ListProjectsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.ListProjectsRequest'
      tags:
        - IntraBrokerService
  /intra/member/invite:
    post:
      summary: InviteMember
      description: Invite another member to join the Project you created
      operationId: IntraBrokerService_InviteMember
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.InviteMemberResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.InviteMemberRequest'
      tags:
        - IntraBrokerService
  /intra/invitation/list:
    post:
      summary: ListInvitations
      description: List all invitations sent and received
      operationId: IntraBrokerService_ListInvitations
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.ListInvitationsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.ListInvitationsRequest'
      tags:
        - IntraBrokerService
  /intra/invitation/process:
    post:
      summary: ProcessInvitation
      description: |-
        Process the received invitation, specify it by invitation_id, choose to
        join the corresponding project or reject it
      operationId: IntraBrokerService_ProcessInvitation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.ProcessInvitationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.ProcessInvitationRequest'
      tags:
        - IntraBrokerService
  /intra/table/create:
    post:
      summary: CreateTable
      description: Create a Table you owned in specified Project
      operationId: IntraBrokerService_CreateTable
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.CreateTableResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.CreateTableRequest'
      tags:
        - IntraBrokerService
  /intra/table/list:
    post:
      summary: ListTables
      description: List all Tables in specified Project
      operationId: IntraBrokerService_ListTables
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.ListTablesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.ListTablesRequest'
      tags:
        - IntraBrokerService
  /intra/table/drop:
    post:
      summary: DropTable
      description: |-
        Drop a Table you owned in specified Project, the relevant CCLs will be
        automatically cleared
      operationId: IntraBrokerService_DropTable
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.DropTableResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.DropTableRequest'
      tags:
        - IntraBrokerService
  /intra/ccl/grant:
    post:
      summary: GrantCCL
      description: Grant CCLs of your Table to a specific member
      operationId: IntraBrokerService_GrantCCL
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.GrantCCLResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.GrantCCLRequest'
      tags:
        - IntraBrokerService
  /intra/ccl/revoke:
    post:
      summary: RevokeCCL
      description: Revoke the CCLs you have granted to the specified member
      operationId: IntraBrokerService_RevokeCCL
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.RevokeCCLResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.RevokeCCLRequest'
      tags:
        - IntraBrokerService
  /intra/ccl/show:
    post:
      summary: ShowCCL
      description: Show CCLs in specified Project, supports specifying Tables, members
      operationId: IntraBrokerService_ShowCCL
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/scql.pb.ShowCCLResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/scql.pb.ShowCCLRequest'
      tags:
        - IntraBrokerService
definitions:
  google.protobuf.Any:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  google.rpc.Status:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/google.protobuf.Any'
  scql.pb.ArchiveProjectResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
  scql.pb.AskInfoResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      datas:
        type: array
        items:
          type: string
          format: byte
  scql.pb.BrokerProtocolVersion:
    type: string
    enum:
      - BROKER_SERVICE_PROTOCOL_V1
    default: BROKER_SERVICE_PROTOCOL_V1
  scql.pb.CancelQueryResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
  scql.pb.ChangeEntry:
    type: object
    properties:
      action:
        $ref: '#/definitions/scql.pb.ChangeEntry.Action'
      data:
        type: string
        format: byte
  scql.pb.ChangeEntry.Action:
    type: string
    enum:
      - CreateTable
      - DropTable
      - GrantCCL
      - RevokeCCL
      - AddProjectMember
      - UpdateProjectConf
      - ArchiveProject
    default: CreateTable
  scql.pb.Checksum:
    type: object
    properties:
      table_schema:
        type: string
        format: byte
        title: checksum of schemas
      ccl:
        type: string
        format: byte
        title: checksum of ccl
  scql.pb.ChecksumCompareResult:
    type: string
    enum:
      - EQUAL
      - TABLE_SCHEMA_NOT_EQUAL
      - CCL_NOT_EQUAL
      - TABLE_CCL_NOT_EQUAL
    default: EQUAL
  scql.pb.ColumnControl:
    type: object
    properties:
      col:
        $ref: '#/definitions/scql.pb.ColumnDef'
      party_code:
        type: string
        description: the code of party that the constraint applies to.
      constraint:
        $ref: '#/definitions/scql.pb.Constraint'
  scql.pb.ColumnDef:
    type: object
    properties:
      column_name:
        type: string
      table_name:
        type: string
  scql.pb.Constraint:
    type: string
    enum:
      - UNKNOWN
      - PLAINTEXT
      - ENCRYPTED_ONLY
      - PLAINTEXT_AFTER_JOIN
      - PLAINTEXT_AFTER_GROUP_BY
      - PLAINTEXT_AFTER_COMPARE
      - PLAINTEXT_AFTER_AGGREGATE
    default: UNKNOWN
    title: |-
      - PLAINTEXT: The column can be revealed at party_code.
       - ENCRYPTED_ONLY: The column or any column produced by it can NOT be revealed at
      party_code. It can be used as condition in JOIN, WHERE, and GROUP BY.
       - PLAINTEXT_AFTER_JOIN: The column can be revealed at party_code if it is used as join key
       - PLAINTEXT_AFTER_GROUP_BY: The column can be revealed at party_code if it is used as group by key
       - PLAINTEXT_AFTER_COMPARE: The column can be revealed at party_code, if and only if
      it is the result of the comparison function e.g. select compare1 >
      compare2 from t group by zip_code
       - PLAINTEXT_AFTER_AGGREGATE: The column can be revealed at party_code, if and only if
      it has been through a N to 1 mapping such as
          - Aggregation operation such as sum/min/max/avg/count, e.g.
               select avg(score) from t group by zip_code
               select avg(score) from t
  scql.pb.CreateProjectRequest:
    type: object
    example:
      conf:
        spu_runtime_cfg:
          field: FM64
          protocol: SEMI2K
      name: proj_name
      project_id: proj_id
    properties:
      project_id:
        type: string
        title: |-
          The unique identifier of the Project, if empty, broker will generate unique
          project id
      name:
        type: string
        title: Project name, human readable
      description:
        type: string
      conf:
        $ref: '#/definitions/scql.pb.ProjectConfig'
        title: Runtime conf for Project
    required:
      - conf
  scql.pb.CreateProjectResponse:
    type: object
    example:
      project_id: proj_id
      status:
        code: 0
        message: 'create project succeed, id: proj_id'
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      project_id:
        type: string
        description: |-
          If Project id is empty in request, broker will generate one and return it
          in response.
  scql.pb.CreateTableRequest:
    type: object
    example:
      columns:
        - dtype: string
          name: ID
        - dtype: int
          name: age
      db_type: mysql
      project_id: proj_id
      ref_table: physic.table_alice
      table_name: ta
    properties:
      project_id:
        type: string
        title: Project id
      table_name:
        type: string
        title: Table name
      ref_table:
        type: string
        title: The refered physical table
      db_type:
        type: string
        title: The db_type of ref_table, maybe 'MySQL/Postgres/csvdb/...'
      columns:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.CreateTableRequest.ColumnDesc'
        title: Columns choosed to refer from physical table
    title: Import physical table `ref_table` in Project `project_id` as `table_name`
    required:
      - project_id
      - table_name
      - ref_table
      - columns
  scql.pb.CreateTableRequest.ColumnDesc:
    type: object
    properties:
      name:
        type: string
        title: Column name
      dtype:
        type: string
        title: Column data type, maybe 'long/float/string/timestamp/datetime/...'
  scql.pb.CreateTableResponse:
    type: object
    example:
      status:
        code: 0
        message: create table for proj_id succeed
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
  scql.pb.DistributeQueryResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      server_protocol:
        $ref: '#/definitions/scql.pb.BrokerProtocolVersion'
      engine_endpoint:
        type: string
        title: SCQLEngine endpoint of server
      client_checksum_result:
        $ref: '#/definitions/scql.pb.ChecksumCompareResult'
      server_checksum_result:
        $ref: '#/definitions/scql.pb.ChecksumCompareResult'
      expected_server_checksum:
        $ref: '#/definitions/scql.pb.Checksum'
  scql.pb.DropTableRequest:
    type: object
    example:
      project_id: proj_id
      table_name: ta
    properties:
      project_id:
        type: string
        title: Project id
      table_name:
        type: string
        title: The name of Table to be droped
    required:
      - project_id
      - table_name
  scql.pb.DropTableResponse:
    type: object
    example:
      status:
        code: 0
        message: drop table succeed
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
  scql.pb.ExchangeJobInfoResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      endpoint:
        type: string
        title: engine endpoint
      server_checksum_result:
        $ref: '#/definitions/scql.pb.ChecksumCompareResult'
      expected_server_checksum:
        $ref: '#/definitions/scql.pb.Checksum'
        title: used when checksum result was not equal
  scql.pb.FetchResultRequest:
    type: object
    example:
      job_id: your-job-id-from-submit
    properties:
      job_id:
        type: string
        title: The unique identifier of the query job, obtained when SubmitQuery is called
    required:
      - job_id
  scql.pb.GrantCCLRequest:
    type: object
    example:
      column_control_list:
        - col:
            column_name: ID
            table_name: ta
          constraint: PLAINTEXT
          party_code: alice
      project_id: proj_id
    properties:
      project_id:
        type: string
        title: Project id
      column_control_list:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.ColumnControl'
        title: CCLs
    required:
      - project_id
      - column_control_list
  scql.pb.GrantCCLResponse:
    type: object
    example:
      status:
        code: 0
        message: grant ccl for proj_id succeed
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
  scql.pb.InvitationRespond:
    type: string
    enum:
      - ACCEPT
      - DECLINE
    default: ACCEPT
  scql.pb.InvitationStatus:
    type: string
    enum:
      - UNDECIDED
      - ACCEPTED
      - DECLINED
      - INVALID
    default: UNDECIDED
  scql.pb.InviteMemberRequest:
    type: object
    example:
      invitee: bob
      project_id: proj_id
    properties:
      project_id:
        type: string
        title: Project id
      invitee:
        type: string
        title: Party code of invitee
      postscript:
        type: string
      method:
        $ref: '#/definitions/scql.pb.InviteMemberRequest.InvitationMethod'
    required:
      - project_id
      - invitee
  scql.pb.InviteMemberRequest.InvitationMethod:
    type: string
    enum:
      - PUSH
      - PULL
    default: PUSH
    description: |2-
       - PUSH: push invitation request to invitee's broker
       - PULL: Get invitation code, then share to invitee via email or IM
      tools.
      status: tobe implemented.
  scql.pb.InviteMemberResponse:
    type: object
    example:
      status:
        code: 0
        message: invite member bob succeed
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      invitation_code:
        type: string
        title: |-
          Valid only when using PULL invitation method.
          Format looks like URL parameters
  scql.pb.InviteToProjectResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
  scql.pb.ListInvitationsRequest:
    type: object
    example: {}
  scql.pb.ListInvitationsResponse:
    type: object
    example:
      invitations:
        - invitation_id: 1
          invitee: bob
          inviter: alice
          project:
            conf:
              spu_runtime_cfg:
                field: FM64
                protocol: SEMI2K
            project_id: proj_id
          status: 0
      status:
        code: 0
        message: list invitations succeed
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      invitations:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.ProjectInvitation'
  scql.pb.ListProjectsRequest:
    type: object
    example:
      ids:
        - proj_id
    properties:
      ids:
        type: array
        items:
          type: string
        title: The ids of Projects to be listed, if empty, all Projects will be listed
  scql.pb.ListProjectsResponse:
    type: object
    example:
      projects:
        - conf:
            spu_runtime_cfg:
              field: FM64
              protocol: SEMI2K
          creator: alice
          members:
            - alice
          project_id: proj_id
      status:
        code: 0
        message: list projects succeed
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      projects:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.ProjectDesc'
  scql.pb.ListTablesRequest:
    type: object
    example:
      project_id: proj_id
    properties:
      project_id:
        type: string
        title: Project id
      names:
        type: array
        items:
          type: string
        title: The names of Tables to be listed, if empty, all Tables will be listed
    required:
      - project_id
  scql.pb.ListTablesResponse:
    type: object
    example:
      status:
        code: 0
        message: list tables succeed
      tables:
        - columns:
            - dtype: string
              name: ID
            - dtype: int
              name: age
          db_type: mysql
          ref_table: bob.user_stats
          table_name: tb
          table_owner: bob
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      tables:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.TableMeta'
  scql.pb.PartyId:
    type: object
    properties:
      code:
        type: string
        title: party code
    description: 'TODO: move PartyId to a proper place.'
  scql.pb.PrimitiveDataType:
    type: string
    enum:
      - PrimitiveDataType_UNDEFINED
      - INT8
      - INT16
      - INT32
      - INT64
      - FLOAT32
      - FLOAT64
      - BOOL
      - STRING
      - DATETIME
      - TIMESTAMP
    default: PrimitiveDataType_UNDEFINED
    description: |-
      the 8-bit signed integer type
       - INT16: the 16-bit signed integer type
       - INT32: the 32-bit signed integer type
       - INT64: the 64-bit signed integer type
       - FLOAT32: the 32-bit binary floating point type
       - FLOAT64: the 64-bit binary floating point type
       - BOOL: Other types
       - DATETIME: DATETIME and TIMESTAMP

      https://dev.mysql.com/doc/refman/8.0/en/datetime.html
       - TIMESTAMP: seconds since '1970-01-01 00:00:00' UTC
    title: '- INT8: Numeric types'
  scql.pb.ProcessInvitationRequest:
    type: object
    example:
      invitation_id: 1
    properties:
      invitation_id:
        type: string
        format: uint64
        title: |-
          The id used to specify the Invitation, corresponding to the result of
          ListInvitation
      respond:
        $ref: '#/definitions/scql.pb.InvitationRespond'
        title: Choose to accept or decline the Invitation
      respond_comment:
        type: string
    required:
      - invitation_id
      - respond
  scql.pb.ProcessInvitationResponse:
    type: object
    example:
      status:
        code: 0
        message: process invitation 1 succeed
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
  scql.pb.ProjectConfig:
    type: object
    properties:
      spu_runtime_cfg:
        $ref: '#/definitions/spu.RuntimeConfig'
        description: The spu runtime configuration.
  scql.pb.ProjectDesc:
    type: object
    properties:
      project_id:
        type: string
      name:
        type: string
      description:
        type: string
      conf:
        $ref: '#/definitions/scql.pb.ProjectConfig'
      creator:
        type: string
        title: Creator of the Project
      members:
        type: array
        items:
          type: string
  scql.pb.ProjectInvitation:
    type: object
    properties:
      invitation_id:
        type: string
        format: uint64
      project:
        $ref: '#/definitions/scql.pb.ProjectDesc'
      inviter:
        type: string
      invitee:
        type: string
      postscript:
        type: string
      status:
        $ref: '#/definitions/scql.pb.InvitationStatus'
  scql.pb.QueryRequest:
    type: object
    example:
      project_id: proj_id
      query: SELECT * FROM TA;
    properties:
      header:
        $ref: '#/definitions/scql.pb.RequestHeader'
      project_id:
        type: string
        title: The ID of the Project in which to run the query
      query:
        type: string
        title: SCQL query to be run
    required:
      - project_id
      - query
  scql.pb.QueryResponse:
    type: object
    example:
      cost_time_s: 0.010912044
      out_columns:
        - elem_type: STRING
          name: ID
          option: VALUE
          shape:
            dim:
              - dim_value: "2"
              - dim_value: "1"
          string_data:
            - alice
            - bob
      status:
        code: 0
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      affected_rows:
        type: string
        format: int64
        title: Valid while DQL is a select-into statement
      warnings:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.SQLWarning'
      cost_time_s:
        type: number
        format: double
      out_columns:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.Tensor'
        title: Output columns are used to store the result datas
  scql.pb.ReplyInvitationResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      project_info:
        type: string
        format: byte
  scql.pb.RequestHeader:
    type: object
    properties:
      custom_headers:
        type: object
        additionalProperties:
          type: string
        description: Custom headers used to record custom information.
    description: RequestHeader carries the user custom headers.
  scql.pb.ResourceSpec:
    type: object
    properties:
      kind:
        $ref: '#/definitions/scql.pb.ResourceSpec.ResourceKind'
      project_id:
        type: string
      table_names:
        type: array
        items:
          type: string
      dest_parties:
        type: array
        items:
          type: string
  scql.pb.ResourceSpec.ResourceKind:
    type: string
    enum:
      - Project
      - Table
      - CCL
    default: Project
    title: |-
      - Project: project information
       - Table: table schema
       - CCL: all ccls for specific table
  scql.pb.RevokeCCLRequest:
    type: object
    example:
      column_control_list:
        - col:
            column_name: ID
            table_name: ta
          constraint: PLAINTEXT
          party_code: alice
      project_id: proj_id
    properties:
      project_id:
        type: string
        title: Project id
      column_control_list:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.ColumnControl'
        title: CCLs
    required:
      - project_id
      - column_control_list
  scql.pb.RevokeCCLResponse:
    type: object
    example:
      status:
        code: 0
        message: revoke ccls succeed
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
  scql.pb.SQLWarning:
    type: object
    properties:
      reason:
        type: string
        title: Description of the warning
  scql.pb.ShowCCLRequest:
    type: object
    example:
      project_id: proj_id
    properties:
      project_id:
        type: string
        title: Project id
      tables:
        type: array
        items:
          type: string
        title: If tables is empty, it will show all Tables in the Project
      dest_parties:
        type: array
        items:
          type: string
        description: |-
          If dest_parties is empty, it will show all members in the Project.
          dest_party value could be `self`, or `others`, or some specific name.
    required:
      - project_id
  scql.pb.ShowCCLResponse:
    type: object
    example:
      column_control_list:
        - col:
            column_name: ID
            table_name: ta
          constraint: PLAINTEXT
          party_code: alice
      status:
        code: 0
        message: show ccl for proj_id succeed
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      column_control_list:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.ColumnControl'
        title: CCLs
  scql.pb.Status:
    type: object
    properties:
      code:
        type: integer
        format: int32
        title: The status code, see [definition](https://github.com/secretflow/scql/blob/main/api/status_code.proto#L22)
      message:
        type: string
        description: Message for recording the error information.
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/google.protobuf.Any'
        description: A list of messages that carry the additional supplementary error details.
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). Each `Status` message contains
      three pieces of data: error code, error message, and error details.

      You can find out more about this error model and how to work with it in the
      [API Design Guide](https://cloud.google.com/apis/design/errors).
  scql.pb.SubmitResponse:
    type: object
    example:
      job_id: d946a6fc-a079-11ee-8b9a-0242ac130003
      status:
        code: 0
        message: submit query job d946a6fc-a079-11ee-8b9a-0242ac130003 succeed
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
      job_id:
        type: string
        description: |-
          The unique identifier of the query job, used to obtain the job result
          later.
  scql.pb.SyncInfoResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
  scql.pb.TableMeta:
    type: object
    properties:
      table_name:
        type: string
      ref_table:
        type: string
      db_type:
        type: string
      table_owner:
        type: string
        title: party code of table owner
      columns:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.TableMeta.Column'
  scql.pb.TableMeta.Column:
    type: object
    properties:
      name:
        type: string
      dtype:
        type: string
  scql.pb.Tensor:
    type: object
    properties:
      name:
        type: string
        description: Tensor name.
      shape:
        $ref: '#/definitions/scql.pb.TensorShape'
        description: |-
          Tensor shape.
          In SCQL cases, it's normally [M] (a vector with M elements).
      elem_type:
        $ref: '#/definitions/scql.pb.PrimitiveDataType'
        description: Tensor element type.
      option:
        $ref: '#/definitions/scql.pb.TensorOptions'
        description: Tensor options.
      annotation:
        $ref: '#/definitions/scql.pb.TensorAnnotation'
        title: |-
          Tensor annotation carries physical status information.
          It MUST be there if the <option> is "Reference"
      int32_data:
        type: array
        items:
          type: integer
          format: int32
        title: For int8, int16, int32 data types
      int64_data:
        type: array
        items:
          type: string
          format: int64
        title: For int64 and timestamp data types
      float_data:
        type: array
        items:
          type: number
          format: float
        title: For float32 data type
      double_data:
        type: array
        items:
          type: number
          format: double
        title: For float64 data type
      bool_data:
        type: array
        items:
          type: boolean
        title: For bool data type
      string_data:
        type: array
        items:
          type: string
        title: For string and datetime data types
      ref_num:
        type: integer
        format: int32
        title: Tensor reference nums, used to delete tensor immediately
    description: A tensor data representation.
  scql.pb.TensorAnnotation:
    type: object
    properties:
      status:
        $ref: '#/definitions/scql.pb.TensorStatus'
  scql.pb.TensorOptions:
    type: string
    enum:
      - VALUE
      - REFERENCE
      - VARIABLE
    default: VALUE
    description: |-
      Tensor options.

       - VALUE: A tensor with data.
       - REFERENCE: A tensor with reference (URI).
       - VARIABLE: A tensor variable (declaration).
  scql.pb.TensorShape:
    type: object
    properties:
      dim:
        type: array
        items:
          type: object
          $ref: '#/definitions/scql.pb.TensorShape.Dimension'
    description: |-
      Defines a tensor shape. A dimension can be either an integer value
      or a symbolic variable. A symbolic variable represents an unknown
      dimension.
  scql.pb.TensorShape.Dimension:
    type: object
    properties:
      dim_value:
        type: string
        format: int64
      dim_param:
        type: string
        description: shape is unknown.
  scql.pb.TensorStatus:
    type: string
    enum:
      - TENSORSTATUS_UNKNOWN
      - TENSORSTATUS_PRIVATE
      - TENSORSTATUS_SECRET
      - TENSORSTATUS_CIPHER
      - TENSORSTATUS_PUBLIC
    default: TENSORSTATUS_UNKNOWN
    description: |2-
       - TENSORSTATUS_UNKNOWN: Unknown.
       - TENSORSTATUS_PRIVATE: Private.
       - TENSORSTATUS_SECRET: Secret, usually in the form of secret sharing.
       - TENSORSTATUS_CIPHER: Ciphertext, usually in the form of homomorphic encryption ciphertext.
       - TENSORSTATUS_PUBLIC: Public.
  scql.pb.UpdateProjectResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/scql.pb.Status'
  spu.FieldType:
    type: string
    enum:
      - FT_INVALID
      - FM32
      - FM64
      - FM128
    default: FT_INVALID
    description: |-
      A security parameter type.

      The secure evaluation is based on some algebraic structure (ring or field),

       - FM32: Ring 2^32
       - FM64: Ring 2^64
       - FM128: Ring 2^128
  spu.ProtocolKind:
    type: string
    enum:
      - PROT_INVALID
      - REF2K
      - SEMI2K
      - ABY3
      - CHEETAH
      - SECURENN
    default: PROT_INVALID
    description: |-
      The protocol kind.

       - PROT_INVALID: Invalid protocol.
       - REF2K: The reference implementation in `ring^2k`, note: this 'protocol' only
      behave-like a fixed point secure protocol without any security guarantee.
      Hence, it should only be selected for debugging purposes.
       - SEMI2K: A semi-honest multi-party protocol. This protocol requires a trusted third
      party to generate the offline correlated randoms. Currently, SecretFlow by
      default ships this protocol with a trusted first party. Hence, it should
      only be used for debugging purposes.
       - ABY3: A honest majority 3PC-protocol. SecretFlow provides the semi-honest
      implementation without Yao.
       - CHEETAH: The famous [Cheetah](https://eprint.iacr.org/2022/207) protocol, a very
      fast 2PC protocol.
       - SECURENN: A semi-honest 3PC-protocol for Neural Network, P2 as the helper,
      (https://eprint.iacr.org/2018/442)
  spu.RuntimeConfig:
    type: object
    properties:
      protocol:
        $ref: '#/definitions/spu.ProtocolKind'
        description: The protocol kind.
      field:
        $ref: '#/definitions/spu.FieldType'
        description: The field type.
      fxp_fraction_bits:
        type: string
        format: int64
        description: |-
          Number of fraction bits of fixed-point number.
          0(default) indicates implementation defined.
      enable_action_trace:
        type: boolean
        description: |-
          When enabled, runtime prints verbose info of the call stack, debug purpose
          only.
      enable_type_checker:
        type: boolean
        description: |-
          When enabled, runtime checks runtime type infos against the
          compile-time ones, exceptions are raised if mismatches happen. Note:
          Runtime outputs prefer runtime type infos even when flag is on.
      enable_pphlo_trace:
        type: boolean
        description: When enabled, runtime prints executed pphlo list, debug purpose only.
      enable_runtime_snapshot:
        type: boolean
        description: |-
          When enabled, runtime dumps executed executables in the dump_dir, debug
          purpose only.
      snapshot_dump_dir:
        type: string
      enable_pphlo_profile:
        type: boolean
        description: |-
          When enabled, runtime records detailed pphlo timing data, debug purpose
          only.
          WARNING: the `send bytes` information is only accurate when
          `experimental_enable_inter_op_par` and `experimental_enable_intra_op_par`
          options are disabled.
      enable_hal_profile:
        type: boolean
        description: |-
          When enabled, runtime records detailed hal timing data, debug purpose only.
          WARNING: the `send bytes` information is only accurate when
          `experimental_enable_inter_op_par` and `experimental_enable_intra_op_par`
          options are disabled.
      public_random_seed:
        type: string
        format: uint64
        description: |-
          The public random variable generated by the runtime, the concrete prg
          function is implementation defined.
          Note: this seed only applies to `public variable` only, it has nothing
          to do with security.
      share_max_chunk_size:
        type: string
        format: uint64
        title: |-
          max chunk size for Value::toProto
          default: 128 * 1024 * 1024
      fxp_div_goldschmidt_iters:
        type: string
        format: int64
        description: |-
          The iterations use in f_div with Goldschmidt method.
          0(default) indicates implementation defined.
      fxp_exp_mode:
        $ref: '#/definitions/spu.RuntimeConfig.ExpMode'
        description: The exponent approximation method.
      fxp_exp_iters:
        type: string
        format: int64
        description: |-
          Number of iterations of `exp` approximation, 0(default) indicates impl
          defined.
      fxp_log_mode:
        $ref: '#/definitions/spu.RuntimeConfig.LogMode'
        description: The logarithm approximation method.
      fxp_log_iters:
        type: string
        format: int64
        description: |-
          Number of iterations of `log` approximation, 0(default) indicates
          impl-defined.
      fxp_log_orders:
        type: string
        format: int64
        description: Number of orders of `log` approximation, 0(default) indicates impl defined.
      sigmoid_mode:
        $ref: '#/definitions/spu.RuntimeConfig.SigmoidMode'
        description: The sigmoid function approximation model.
      enable_lower_accuracy_rsqrt:
        type: boolean
        title: Enable a simpler rsqrt approximation
      sine_cosine_iters:
        type: string
        format: int64
        title: Sine/Cosine approximation iterations
      beaver_type:
        $ref: '#/definitions/spu.RuntimeConfig.BeaverType'
        description: beaver config, works for semi2k and spdz2k for now.
      ttp_beaver_config:
        $ref: '#/definitions/spu.TTPBeaverConfig'
        description: TrustedThirdParty configs.
      trunc_allow_msb_error:
        type: boolean
        description: |-
          For protocol like SecureML, the most significant bit may have error with
          low probability, which lead to huge calculation error.
      experimental_disable_mmul_split:
        type: boolean
        title: 'Experimental: DO NOT USE'
      experimental_enable_inter_op_par:
        type: boolean
        description: Inter op parallel, aka, DAG level parallel.
      experimental_enable_intra_op_par:
        type: boolean
        description: Intra op parallel, aka, hal/mpc level parallel.
      experimental_disable_vectorization:
        type: boolean
        description: Disable kernel level vectorization.
      experimental_inter_op_concurrency:
        type: string
        format: uint64
        description: Inter op concurrency.
      experimental_enable_colocated_optimization:
        type: boolean
        title: Enable use of private type
    description: |+
      The SPU runtime configuration.

  spu.RuntimeConfig.BeaverType:
    type: string
    enum:
      - TrustedFirstParty
      - TrustedThirdParty
      - MultiParty
    default: TrustedFirstParty
    description: |2-
       - TrustedFirstParty: Assume first party (rank0) as trusted party to generate beaver triple.
      WARNING: It is NOT SAFE and SHOULD NOT BE used in production.
       - TrustedThirdParty: Generate beaver triple through an additional trusted third party.
       - MultiParty: Generate beaver triple through multi-party.
  spu.RuntimeConfig.ExpMode:
    type: string
    enum:
      - EXP_DEFAULT
      - EXP_PADE
      - EXP_TAYLOR
    default: EXP_DEFAULT
    description: |-
      The exponential approximation method.

       - EXP_DEFAULT: Implementation defined.
       - EXP_PADE: The pade approximation.
       - EXP_TAYLOR: Taylor series approximation.
  spu.RuntimeConfig.LogMode:
    type: string
    enum:
      - LOG_DEFAULT
      - LOG_PADE
      - LOG_NEWTON
    default: LOG_DEFAULT
    description: |-
      The logarithm approximation method.

       - LOG_DEFAULT: Implementation defined.
       - LOG_PADE: The pade approximation.
       - LOG_NEWTON: The newton approximation.
  spu.RuntimeConfig.SigmoidMode:
    type: string
    enum:
      - SIGMOID_DEFAULT
      - SIGMOID_MM1
      - SIGMOID_SEG3
      - SIGMOID_REAL
    default: SIGMOID_DEFAULT
    description: |-
      The sigmoid approximation method.

       - SIGMOID_DEFAULT: Implementation defined.
       - SIGMOID_MM1: Minmax approximation one order.
      f(x) = 0.5 + 0.125 * x
       - SIGMOID_SEG3: Piece-wise simulation.
      f(x) = 0.5 + 0.125x if -4 <= x <= 4
             1            if       x > 4
             0            if  -4 > x
       - SIGMOID_REAL: The real definition, which depends on exp's accuracy.
      f(x) = 1 / (1 + exp(-x))
  spu.TTPBeaverConfig:
    type: object
    properties:
      server_host:
        type: string
        description: TrustedThirdParty beaver server's remote ip:port or load-balance uri.
      session_id:
        type: string
        description: if empty, use link id as session id.
      adjust_rank:
        type: integer
        format: int32
        description: |-
          which rank do adjust rpc call, usually choose the rank closer to the
          server.
