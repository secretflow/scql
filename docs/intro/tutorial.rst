Centralized Deployment Quickstart Tutorial
==========================================

In this tutorial, you will deploy the SCQL system on a single machine, then simulate the project settings for joint data analysis between two parties, and finally initiate a joint analysis query.


Prerequisites
-------------


Build scdbclient & scqltool
^^^^^^^^^^^^^^^^^^^^^^^^^^^

``scdbclient`` is a command-line client for SCDBServer, we would use it to submit queries to SCDBServer and fetch the query results back.

.. code-block:: bash

    # build scdbclient from source
    # requirements:
    #   go version >= 1.22
    go build -o scdbclient cmd/scdbclient/main.go

    # try scdbclient
    ./scdbclient --help


``scqltool`` is a command-line tool to help you generate create-user-statement query. Since create-user-statement query should contain message and its signature signed by party's private key, it is difficult to write by hand.

.. code-block:: bash

    go build -o scqltool cmd/scqltool/main.go

    # try scqltool
    ./scqltool --help

    ./scqltool genCreateUserStmt --help


Generate PrivateKey and Exchange PublicKey
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: bash

    bash examples/scdb-tutorial/setup.sh

.. note::
   The setup.sh script will generate private key for each party, and exchange public key with peers, add peers public key to authorized_profile.json configuration.

Start SCQL Service
------------------

You could start SCQL service via `docker-compose <https://github.com/secretflow/scql/tree/main/examples/scdb-tutorial>`_, it would deploy and start services as shown in the following figure, it contains a SCDBServer and two SCQLEngines from party ``alice``, ``bob``.

.. image:: /imgs/scql_quickstart_deploy.png
    :alt: docker-compose deployment for quickstart example


.. note::
    To demonstrate SCQL, we conducted the following simplified operations:

    1. The SCDBServer and two other SCQLEngines use the same database server but are separated by distinct database names.
    2. The SCDBServer is served through the HTTP protocol. However, for production environments, it is recommended to use HTTPS instead. Please check :ref:`TLS Configuration <scdb-tls>` for details.


.. code-block:: bash

    # startup docker-compose
    # If you install docker with Compose V1, please use `docker-compose` instead of `docker compose`
    (cd examples/scdb-tutorial && docker compose up -d)

SCDBServer is listening on ``http://localhost:8080``, you could send queries to it via scdbclient.

.. note::
    Please checkout `examples/scdb-tutorial/README.md <https://github.com/secretflow/scql/tree/main/examples/scdb-tutorial/README.md>`_ troubleshooting section for help if you encounter any problems.



Create database, user and tables
--------------------------------

.. code-block:: bash

    # use scdbclient to connect to scdbserver
    ./scdbclient prompt --host=http://localhost:8080 --usersConfFileName=examples/scdb-tutorial/client/users.json --sync
    # switch to root user
    > switch root
    root> show databases;
    [fetch]
    0 rows in set: (4.859805ms)
    +----------+
    | Database |
    +----------+
    +----------+
    # create our first db demo
    root> create database demo
    [fetch] OK for DDL/DCL
    root> show databases;
    [fetch]
    1 rows in set: (2.945772ms)
    +----------+
    | Database |
    +----------+
    | demo     |
    +----------+
    # create user "alice" with password "some_password" for party "alice"
    # note: if you want to use a custom password,
    # please ensure it is consistent with the one configured in `examples/scdb-tutorial/client/users.json`
    #
    # NOTE: please paste the create user statement generated by scqltool
    # ./scqltool genCreateUserStmt --user alice --passwd some_password --party alice --pem examples/scdb-tutorial/engine/alice/conf/ed25519key.pem
    root> CREATE USER `alice` PARTY_CODE 'alice' IDENTIFIED BY 'some_password' WITH '2023-08-23T20:03:34.268353853+08:00' '/oWeDbslKFQaqM6aOumnQY56i6MQKNNz84v0nkdhniXS0eBNX/q3n4IYz2EkABgKD+nkIVFtBokQqx5fr29CBw==' 'MCowBQYDK2VwAyEAzvfiNl1c1TjcvaTQBAxpG93MzHRGwuUBrPI3qf5N2XQ='
    [fetch] OK for DDL/DCL
    # create user "bob" with password "another_password" for party "bob"
    #
    # NOTE: please paste the create user statement generated by scqltool
    # ./scqltool genCreateUserStmt --user bob --passwd another_password --party bob --pem examples/scdb-tutorial/engine/bob/conf/ed25519key.pem
    root> CREATE USER `bob` PARTY_CODE 'bob' IDENTIFIED BY 'another_password' WITH '2023-08-23T20:05:30.707053037+08:00' 'M5if0LyzVcBuik1C1MEHw4uGIRI6bH42CMx+O+Zpwu4IplcrQ0om0uhE7JJW910k+IGErep3vZOV8i+Icg2uBg==' 'MCowBQYDK2VwAyEAxWpev3nDG+sp9r3xMJVuqzpmRmXFQNs3e0P1Dj9DRRM='
    [fetch] OK for DDL/DCL
    # grant create, grant, drop privileges to user alice
    root> GRANT CREATE, GRANT OPTION, DROP ON demo.* TO alice
    [fetch] OK for DDL/DCL
    # grant create, grant, drop privileges to user bob
    root> GRANT CREATE, GRANT OPTION, DROP ON demo.* TO bob
    [fetch] OK for DDL/DCL
    # switch to user alice
    root> switch alice
    alice> show databases;
    [fetch]
    1 rows in set: (3.718238ms)
    +----------+
    | Database |
    +----------+
    | demo     |
    +----------+
    # create table `ta`
    alice> CREATE TABLE demo.ta (ID string, credit_rank int, income int, age int) REF_TABLE=alice.user_credit DB_TYPE='mysql';
    [fetch] OK for DDL/DCL
    # describe created table
    alice> DESCRIBE demo.ta
    [fetch]
    4 rows in set: (2.581103ms)
    +-------------+--------+
    |    Field    |  Type  |
    +-------------+--------+
    | id          | string |
    | credit_rank | int    |
    | income      | int    |
    | age         | int    |
    +-------------+--------+
    # switch to user bob and create table
    alice> switch bob
    bob> CREATE TABLE demo.tb (ID string, order_amount double, is_active int) REF_TABLE=bob.user_stats DB_TYPE='mysql'
    bob> DESCRIBE demo.tb
    [fetch]
    3 rows in set: (3.487224ms)
    +--------------+--------+
    |    Field     |  Type  |
    +--------------+--------+
    | id           | string |
    | order_amount | double  |
    | is_active    | int    |
    +--------------+--------+

Register SCQLEngine Endpoints
-----------------------------

.. code-block:: bash

    bob> switch alice
    alice> alter user alice with ENDPOINT 'engine_alice:8003'
    alice> switch bob
    bob> alter user bob with ENDPOINT 'engine_bob:8003'

Grant CCL
---------

.. code-block:: bash

    bob> switch alice
    # alice set CCL
    alice> GRANT SELECT PLAINTEXT(ID, credit_rank, income, age) ON demo.ta TO alice;
    alice> GRANT SELECT PLAINTEXT_AFTER_JOIN(ID) ON demo.ta TO bob;
    alice> GRANT SELECT PLAINTEXT_AFTER_GROUP_BY(credit_rank) ON demo.ta TO bob;
    alice> GRANT SELECT PLAINTEXT_AFTER_AGGREGATE(income) ON demo.ta TO bob;
    alice> GRANT SELECT PLAINTEXT_AFTER_COMPARE(age) ON demo.ta TO bob;
    # switch to bob and set ccl
    alice> switch bob
    bob> GRANT SELECT PLAINTEXT(ID, order_amount, is_active) ON demo.tb TO bob;
    bob> GRANT SELECT PLAINTEXT_AFTER_JOIN(ID) ON demo.tb TO alice;
    bob> GRANT SELECT PLAINTEXT_AFTER_COMPARE(is_active) ON demo.tb TO alice;
    bob> GRANT SELECT PLAINTEXT_AFTER_AGGREGATE(order_amount) ON demo.tb TO alice;
    # show grants
    bob> show grants on demo for alice
    [fetch]
    8 rows in set: (5.909338ms)
    +----------------------------------------------------------------------------+
    |                         Grants on demo for alice@%                         |
    +----------------------------------------------------------------------------+
    | GRANT CREATE, DROP, GRANT OPTION ON demo.* TO alice                        |
    | GRANT SELECT PLAINTEXT(id) ON demo.ta TO alice                             |
    | GRANT SELECT PLAINTEXT(credit_rank) ON demo.ta TO alice                    |
    | GRANT SELECT PLAINTEXT(income) ON demo.ta TO alice                         |
    | GRANT SELECT PLAINTEXT(age) ON demo.ta TO alice                            |
    | GRANT SELECT PLAINTEXT_AFTER_JOIN(id) ON demo.tb TO alice                  |
    | GRANT SELECT PLAINTEXT_AFTER_AGGREGATE(order_amount) ON demo.tb TO alice   |
    | GRANT SELECT PLAINTEXT_AFTER_COMPARE(is_active) ON demo.tb TO alice        |
    +----------------------------------------------------------------------------+
    bob> show grants on demo for bob
    [fetch]
    8 rows in set: (4.974734ms)
    +----------------------------------------------------------------------+
    |                       Grants on demo for bob@%                       |
    +----------------------------------------------------------------------+
    | GRANT CREATE, DROP, GRANT OPTION ON demo.* TO bob                    |
    | GRANT SELECT PLAINTEXT_AFTER_JOIN(id) ON demo.ta TO bob              |
    | GRANT SELECT PLAINTEXT_AFTER_GROUP_BY(credit_rank) ON demo.ta TO bob |
    | GRANT SELECT PLAINTEXT_AFTER_AGGREGATE(income) ON demo.ta TO bob     |
    | GRANT SELECT PLAINTEXT_AFTER_COMPARE(age) ON demo.ta TO bob          |
    | GRANT SELECT PLAINTEXT(id) ON demo.tb TO bob                         |
    | GRANT SELECT PLAINTEXT(order_amount) ON demo.tb TO bob               |
    | GRANT SELECT PLAINTEXT(is_active) ON demo.tb TO bob                  |
    +----------------------------------------------------------------------+


Do query
--------


.. code-block:: bash

    bob> switch alice
    alice> use demo
    [demo]alice> SELECT ta.credit_rank, COUNT(*) as cnt, AVG(ta.income) as avg_income, AVG(tb.order_amount) as avg_amount FROM ta INNER JOIN tb ON ta.ID = tb.ID WHERE ta.age >= 20 AND ta.age <= 30 AND tb.is_active=1 GROUP BY ta.credit_rank;
    Warning : for safety, we filter the results for groups which contain less than 4 items.
    [fetch]
    2 rows in set: (1.151690583s)
    +-------------+-----+------------+------------+
    | credit_rank | cnt | avg_income | avg_amount |
    +-------------+-----+------------+------------+
    |           6 |   4 |  336016.22 |  5499.4043 |
    |           5 |   6 |  18069.775 |  7743.3486 |
    +-------------+-----+------------+------------+

