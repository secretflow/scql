// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package grm.pb;

import "api/status.proto";
import "api/datasource.proto";

option go_package = "proto-gen/grm";

// global resource manager service
service GRMService {
  // Request metadata of table specified by `request.tid`, the server should
  // deny the request if `request.token` has no read privilege of the requested
  // table metadata.
  rpc GetTableMeta(GetTableMetaRequest) returns (GetTableMetaResponse);
  // Request scql engine informations in batch.
  rpc GetEngines(GetEnginesRequest) returns (GetEnginesResponse);
  // Send table ownership verification request, using a token to prove
  // ownership.
  rpc VerifyTableOwnership(VerifyTableOwnershipRequest)
      returns (VerifyTableOwnershipResponse);
}

message GetTableMetaRequest {
  // table identifier
  string tid = 1;
  // party code of request issuer
  string request_party = 2;
  // token used to authenticate the request
  string token = 3;
}

message GetTableMetaResponse {
  scql.pb.Status status = 1;
  TableSchema schema = 2;
  scql.engine.DataSourceKind db_type = 3;
}

message ColumnDesc {
  // column name
  string name = 1;
  // column data type
  string type = 2;
  string description = 3;
}

message TableSchema {
  string db_name = 1;
  string table_name = 2;
  repeated ColumnDesc columns = 3;
}

message GetEnginesRequest {
  repeated string party_codes = 1;
  string token = 2;
}

message GetEnginesResponse {
  message EngineInfo {
    repeated string endpoints = 1;
    repeated string credential = 2;
  }

  scql.pb.Status status = 1;
  // engine_infos[i] is EngineInfo for party `request.party_codes[i]`
  repeated EngineInfo engine_infos = 2;
}

message VerifyTableOwnershipRequest {
  string tid = 1;
  string token = 2;
}

message VerifyTableOwnershipResponse {
  scql.pb.Status status = 1;
  bool is_owner = 2;
}